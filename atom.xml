<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[mkitby's Blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://mkitby.com/"/>
  <updated>2016-05-15T08:29:49.470Z</updated>
  <id>http://mkitby.com/</id>
  
  <author>
    <name><![CDATA[mkitby]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Raspberry Pi从零开始搭建低成本NAS(11)-硬盘功耗管理]]></title>
    <link href="http://mkitby.com/2016/05/15/raspberry-pi-nas-manage-hdd-power/"/>
    <id>http://mkitby.com/2016/05/15/raspberry-pi-nas-manage-hdd-power/</id>
    <published>2016-05-15T07:00:52.000Z</published>
    <updated>2016-05-15T08:29:49.470Z</updated>
    <content type="html"><![CDATA[<p>为了延长硬盘使用寿命，当硬盘不使用时，需要让硬盘休眠，目前有一些软件可以自动做这事，像 hdparm, hd-idle 和 sdparm，具体用哪个取决于USB to SATA控制器和硬盘本身，其实说白了就是一个一个试，哪个有用就用哪个。当然，这里说的都是机械硬盘，固态硬盘没研究过。</p>
<p>注意：不要让机械硬盘频繁地休眠唤醒，这样会给电机和轴承较大负荷，会加剧硬盘损耗. 一般制造商建议的最小休眠时间是 3-5 分钟。参考（<a href="http://hd-idle.sourceforge.net/）" target="_blank" rel="external">http://hd-idle.sourceforge.net/）</a></p>
<a id="more"></a>
<p>首先查看硬盘设备名，一般就是/dev/sda,dev/sdb之类的</p>
<pre><code><span class="title">sudo</span> blkid
</code></pre><p>例如输出</p>
<pre><code><span class="regexp">/dev/</span><span class="string">mmcblk0p1:</span> SEC_TYPE=<span class="string">"msdos"</span> LABEL=<span class="string">"boot"</span> UUID=<span class="string">"15CD-3B79"</span> TYPE=<span class="string">"vfat"</span>
<span class="regexp">/dev/</span><span class="string">mmcblk0p2:</span> UUID=<span class="string">"13d368bf-6dbf-4751-8ba1-88bed06bef77"</span> TYPE=<span class="string">"ext4"</span>
<span class="regexp">/dev/</span><span class="string">sda1:</span> UUID=<span class="string">"7e623443-f19a-4564-8e60-e9d2170ac32a"</span> TYPE=<span class="string">"ext4"</span>
<span class="regexp">/dev/</span><span class="string">sdb1:</span> LABEL=<span class="string">"COLORSPACE"</span> UUID=<span class="string">"F8E6-4FDB"</span> TYPE=<span class="string">"vfat"</span>
<span class="regexp">/dev/</span><span class="string">sdb2:</span> UUID=<span class="string">"3007-F316"</span> TYPE=<span class="string">"exfat"</span>
</code></pre><p>硬盘设备名为/dev/sdb,硬盘有两个分区</p>
<h1 id="安装和配置hdparm">安装和配置hdparm</h1><p>先测试hdparm是否支持。</p>
<p>安装 hdparm，</p>
<pre><code>sudo apt-<span class="keyword">get</span> install hdparm -y
</code></pre><p>确保你的硬盘支持hdparm,</p>
<pre><code>sudo hdparm -y <span class="regexp">/dev/</span>sdb
</code></pre><p>如果输出如下结果，就表明支持，</p>
<pre><code><span class="regexp">/dev/</span><span class="string">sdb:</span>
 issuing standby command
</code></pre><p>如果看到类似如下输出，就表明不支持，可以跳到 hd-idle 或者 sdparm，</p>
<pre><code>/dev/sda:
 issuing standby command
SG_IO: bad/missing sense data, sb[]:  <span class="number">70</span> <span class="number">00</span> <span class="number">05</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">0</span>a <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">20</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span>
</code></pre><p>检查硬盘是否支持写缓存功能，</p>
<pre><code>sudo hdparm -I <span class="regexp">/dev/</span>sdb | <span class="keyword">grep</span> <span class="string">'Write cache'</span>
</code></pre><p>如果看到 * (星号)，表示支持，</p>
<pre><code><span class="bullet">*    </span>Write cache
</code></pre><p>如果没有看到 * (星号)，表示不支持，</p>
<pre><code><span class="operator">Write</span> cache
</code></pre><p>编辑配置文件，</p>
<pre><code>sudo <span class="keyword">vim</span> /etc/hdparm.<span class="keyword">conf</span>
</code></pre><p>spindown_time值乘以 5 得到总的时间（单位秒）. 例如想配置成空闲10分钟就休眠，spindown_time = 10 * 60 / 5 = 120</p>
<p>在文件结尾加入，</p>
<pre><code>/dev/sdb {
write_cache = <span class="function_start"><span class="keyword">on</span></span>
spindown_time = <span class="number">120</span>
}
</code></pre><p>如果不支持写缓存，去掉 write_cache = on。</p>
<p>重启 hdparm 服务，</p>
<pre><code><span class="title">sudo</span> service hdparm restart
</code></pre><p>更多hdparm配置可以参考这(<a href="http://www.linux-magazine.com/Online/Features/Tune-Your-Hard-Disk-with-hdparm" target="_blank" rel="external">http://www.linux-magazine.com/Online/Features/Tune-Your-Hard-Disk-with-hdparm</a>)</p>
<h1 id="安装和配置_hd-idle">安装和配置 hd-idle</h1><p>如果你的硬盘不支持 hdparm，或者就想试下hd-idle, 可以删除hdparm</p>
<pre><code>sudo apt-<span class="built_in">get</span> <span class="built_in">remove</span> hdparm -<span class="keyword">y</span>
</code></pre><p>hd-idle 使用一个特殊的系统文件来检测磁盘活动, 如果没有这个文件，那么就不能使用hd-idle。输入</p>
<pre><code>cat /<span class="keyword">proc</span>/diskstats
</code></pre><p>应该会看到如下的输出, 如果提示找不到文件或目录，那就不支持hd-idle。</p>
<p>   8      16 sdb 5604 130363 146538 16780 1814 51838 429152 763380 0 18230 780150<br>   8      17 sdb1 5075 130363 139418 15370 8 0 8 10 0 8680 15370<br>   8      18 sdb2 512 0 6984 1290 1805 51838 429144 763360 0 9770 764650</p>
<p>hd-idle的自己编译，</p>
<pre><code><span class="label">sudo</span> apt-<span class="preprocessor">get</span> install <span class="keyword">build-essential </span>fakeroot debhelper -y
</code></pre><p>获取源代码，</p>
<pre><code>wget <span class="symbol">http:</span>/<span class="regexp">/sourceforge.net/projects</span><span class="regexp">/hd-idle/files</span><span class="regexp">/hd-idle-1.05.tgz</span>
</code></pre><p>解压缩进入目录</p>
<pre><code><span class="tag">tar</span> <span class="tag">-xvf</span> <span class="tag">hd-idle-1</span><span class="class">.05</span><span class="class">.tgz</span> &amp;&amp; <span class="tag">cd</span> <span class="tag">hd-idle</span>
</code></pre><p>编译安装，</p>
<pre><code>dpkg-buildpackage -rfakeroot
sudo dpkg -<span class="tag">i</span> ../hd-idle_*.deb
</code></pre><p>继续检查硬盘是否支持hd-idle,</p>
<pre><code>sudo hd-idle -<span class="tag">i</span> <span class="number">0</span> -<span class="tag">a</span> sda -<span class="tag">i</span> <span class="number">300</span> -d
</code></pre><p>You should see output like this</p>
<p>probing sda: reads: 13418, writes: 594344<br>probing sdb: reads: 146538, writes: 429152</p>
<p>按 Ctrl+C 停止 hd-idle</p>
<p>编辑配置文件，</p>
<pre><code>sudo vim <span class="regexp">/etc/</span><span class="keyword">default</span><span class="regexp">/hd-idle</span>
</code></pre><p>修改下面来开启hd-idle</p>
<pre><code><span class="setting">START_HD_IDLE=<span class="value"><span class="keyword">true</span></span></span>
</code></pre><p>调整空闲时间为10分钟 (60 秒 * 10)</p>
<pre><code><span class="setting">HD_IDLE_OPTS=<span class="value"><span class="string">"-i 0 -a sda -i 600"</span></span></span>
</code></pre><p>重启服务，</p>
<pre><code><span class="title">sudo</span> service hd-idle restart
</code></pre><p>如果hd-idle也不支持，可以试下 sdparm</p>
<h1 id="安装和配置_sdparm">安装和配置 sdparm</h1><p>首先删除 hdparm 和 hd-idle</p>
<pre><code>sudo apt-<span class="built_in">get</span> <span class="built_in">remove</span> hdparm -<span class="keyword">y</span>
sudo dpkg -<span class="keyword">r</span> hd-idle
</code></pre><p>安装 sdparm</p>
<pre><code>sudo apt-<span class="keyword">get</span> install sdparm -y
</code></pre><p>测试sdparm是否支持，停止一切硬盘操作，输入</p>
<pre><code><span class="comment">sydo</span> <span class="comment">sdparm</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">flexible</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">command=stop</span> <span class="comment">/dev/sdb</span>
</code></pre><p>应该可以看到如下输出，</p>
<pre><code><span class="regexp">/dev/</span><span class="string">sdb:</span> SANHO     IUSBPORT          <span class="number">0</span>
</code></pre><p>如果需要每隔10分钟休眠硬盘，可以用如下crontab命令</p>
<pre><code>sudo crontab <span class="operator">-l</span> | { cat; <span class="built_in">echo</span> <span class="string">"/10 * * * * sdparm --command=stop /dev/sda"</span>; } | sudo crontab -
</code></pre><p>经过以上折腾，终于可以放心了，不用担心硬盘一天24小时不要命的转。</p>
<h1 id="参考">参考</h1><p><a href="http://sg.danny.cz/sg/sdparm.html" target="_blank" rel="external">http://sg.danny.cz/sg/sdparm.html</a><br><a href="http://www.nslu2-linux.org/wiki/FAQ/SpinDownUSBHarddisks" target="_blank" rel="external">http://www.nslu2-linux.org/wiki/FAQ/SpinDownUSBHarddisks</a><br><a href="http://hd-idle.sourceforge.net/" target="_blank" rel="external">http://hd-idle.sourceforge.net/</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>为了延长硬盘使用寿命，当硬盘不使用时，需要让硬盘休眠，目前有一些软件可以自动做这事，像 hdparm, hd-idle 和 sdparm，具体用哪个取决于USB to SATA控制器和硬盘本身，其实说白了就是一个一个试，哪个有用就用哪个。当然，这里说的都是机械硬盘，固态硬盘没研究过。</p>
<p>注意：不要让机械硬盘频繁地休眠唤醒，这样会给电机和轴承较大负荷，会加剧硬盘损耗. 一般制造商建议的最小休眠时间是 3-5 分钟。参考（<a href="http://hd-idle.sourceforge.net/）">http://hd-idle.sourceforge.net/）</a></p>]]>
    
    </summary>
    
      <category term="DIY" scheme="http://mkitby.com/tags/DIY/"/>
    
      <category term="NAS" scheme="http://mkitby.com/tags/NAS/"/>
    
      <category term="Raspberry Pi" scheme="http://mkitby.com/tags/Raspberry-Pi/"/>
    
      <category term="树莓派" scheme="http://mkitby.com/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="硬盘低功耗" scheme="http://mkitby.com/tags/%E7%A1%AC%E7%9B%98%E4%BD%8E%E5%8A%9F%E8%80%97/"/>
    
      <category term="Raspberry Pi" scheme="http://mkitby.com/categories/Raspberry-Pi/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Raspberry Pi从零开始搭建低成本NAS(10)-监控关键服务]]></title>
    <link href="http://mkitby.com/2016/04/08/raspberry-pi-nas-monitor/"/>
    <id>http://mkitby.com/2016/04/08/raspberry-pi-nas-monitor/</id>
    <published>2016-04-08T13:11:56.000Z</published>
    <updated>2016-04-08T13:34:37.714Z</updated>
    <content type="html"><![CDATA[<p>服务器长时间运行，难免有些服务会挂掉，最好就是采用监控软件来监控关键服务，保证服务挂掉之后能够自动恢复。下面介绍如何使用monit来实现监控：</p>
<a id="more"></a>
<h1 id="安装配置monit">安装配置monit</h1><p>首先安装monit,</p>
<pre><code>sudo apt-<span class="keyword">get</span> install monit
</code></pre><p>编辑配置文件，</p>
<pre><code>sudo vim <span class="regexp">/etc/m</span>onit<span class="regexp">/monitrc</span>
</code></pre><p>下面只列出我认为可能需要修改的地方,</p>
<pre><code><span class="preprocessor"># 检查周期，默认为<span class="number">120</span>秒，可以根据需要自行调节，这里设置为<span class="number">30</span>秒。</span>
<span class="built_in">set</span> daemon  <span class="number">30</span>

<span class="preprocessor"># 开启内嵌的web服务，可以访问http:<span class="comment">//RPi-IP:2812查看监控状态，去掉最前面的“#”可以开启，默认禁用</span></span>
<span class="preprocessor">#set httpd port <span class="number">2812</span> and</span>
<span class="preprocessor">#allow localhost        # 允许本地访问</span>
<span class="preprocessor">#allow <span class="number">192.168</span><span class="number">.1</span><span class="number">.0</span>/<span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span> # 允许<span class="number">192.168</span><span class="number">.1</span><span class="number">.0</span>-<span class="number">192.168</span><span class="number">.1</span><span class="number">.255</span>访问</span>

<span class="preprocessor"># 包含文件夹</span>
include /etc/monit/conf.d<span class="comment">/*</span>
</code></pre><h1 id="新建相关配置文件">新建相关配置文件</h1><h2 id="aria2">aria2</h2><p>新建配置文件aria2.conf，</p>
<pre><code>sudo vim /etc/monit/<span class="keyword">conf</span>.<span class="keyword">d</span>/aria2.<span class="keyword">conf</span>
</code></pre><p>输入，</p>
<pre><code># sudo vim /etc/monit/conf.d/aria2.conf
<span class="operator"><span class="keyword">check</span> process aria2 <span class="keyword">with</span> matching aria2c
    <span class="keyword">start</span> program = <span class="string">"/etc/init.d/aria2c start"</span>
    <span class="keyword">stop</span> program  = <span class="string">"/etc/init.d/aria2c stop"</span>
    <span class="keyword">if</span> <span class="keyword">failed</span> port <span class="number">6800</span> <span class="keyword">type</span> tcp <span class="keyword">then</span> restart
    <span class="keyword">if</span> <span class="number">3</span> restarts <span class="keyword">within</span> <span class="number">5</span> cycles <span class="keyword">then</span> <span class="keyword">timeout</span></span>
</code></pre><h2 id="miniDLNA">miniDLNA</h2><p>新建配置文件minidlna.conf，</p>
<pre><code>sudo vim/etc/monit/<span class="keyword">conf</span>.<span class="keyword">d</span>/minidlna.<span class="keyword">conf</span>
</code></pre><p>输入，</p>
<pre><code># sudo vim /etc/monit/conf.d/minidlna.conf
<span class="operator"><span class="keyword">check</span> process minidlna <span class="keyword">with</span> pidfile /<span class="keyword">var</span>/run/minidlna/minidlna.pid
    <span class="keyword">start</span> program = <span class="string">"/etc/init.d/minidlna start"</span>
    <span class="keyword">stop</span> program  = <span class="string">"/etc/init.d/minidlna stop"</span>
    <span class="keyword">if</span> <span class="keyword">failed</span> port <span class="number">8200</span> <span class="keyword">use</span> <span class="keyword">type</span> tcp <span class="keyword">then</span> restart
    <span class="keyword">if</span> <span class="number">3</span> restarts <span class="keyword">within</span> <span class="number">5</span> cycles <span class="keyword">then</span> <span class="keyword">timeout</span></span>
</code></pre><h2 id="nginx">nginx</h2><p>新建配置文件/nginx.conf，</p>
<pre><code>sudo vim /etc/monit/<span class="keyword">conf</span>.<span class="keyword">d</span>/nginx.<span class="keyword">conf</span>
</code></pre><p>输入，</p>
<pre><code># sudo vim /etc/monit/conf.d/nginx.conf
<span class="operator"><span class="keyword">check</span> process nginx <span class="keyword">with</span> pidfile /<span class="keyword">var</span>/run/nginx.pid
  <span class="keyword">start</span> program = <span class="string">"/etc/init.d/nginx start"</span> <span class="keyword">with</span> <span class="keyword">timeout</span> <span class="number">10</span> seconds
  <span class="keyword">stop</span> program  = <span class="string">"/etc/init.d/nginx stop"</span>
  <span class="keyword">if</span> <span class="keyword">failed</span> host localhost port <span class="number">81</span> protocol <span class="keyword">http</span>
     <span class="keyword">with</span> <span class="keyword">timeout</span> <span class="number">10</span> seconds
     <span class="keyword">then</span> restart
  <span class="keyword">if</span> <span class="number">3</span> restarts <span class="keyword">within</span> <span class="number">5</span> cycles <span class="keyword">then</span> <span class="keyword">timeout</span>
  <span class="keyword">group</span> webserver</span>
</code></pre><h2 id="samba">samba</h2><p>新建配置文件samba.conf，</p>
<pre><code>sudo vim /etc/monit/<span class="keyword">conf</span>.<span class="keyword">d</span>/samba.<span class="keyword">conf</span>
</code></pre><p>输入，</p>
<pre><code># sudo vim /etc/monit/conf.d/samba.conf
<span class="operator"><span class="keyword">check</span> process samba <span class="keyword">with</span> pidfile /<span class="keyword">var</span>/run/samba/smbd.pid
        <span class="keyword">start</span> program = <span class="string">"/etc/init.d/samba start"</span>
        <span class="keyword">stop</span> program = <span class="string">"/etc/init.d/samba stop"</span>
        <span class="keyword">if</span> <span class="keyword">failed</span> port <span class="number">139</span> <span class="keyword">then</span> restart
        <span class="keyword">if</span> <span class="number">5</span> restarts <span class="keyword">within</span> <span class="number">5</span> cycles <span class="keyword">then</span> <span class="keyword">timeout</span></span>
</code></pre><h2 id="ftp">ftp</h2><p>新建配置文vsftpd.conf,</p>
<pre><code>sudo vim /etc/monit/<span class="keyword">conf</span>.<span class="keyword">d</span>/vsftpd.<span class="keyword">conf</span>
</code></pre><p>输入，</p>
<pre><code># sudo vim /etc/monit/conf.d/vsftpd.conf
<span class="operator"><span class="keyword">check</span> process vsftpd <span class="keyword">with</span> pidfile /<span class="keyword">var</span>/run/vsftpd/vsftpd.pid
    <span class="keyword">start</span> program = <span class="string">"/etc/init.d/vsftpd start"</span>
    <span class="keyword">stop</span> program = <span class="string">"/etc/init.d/vsftpd stop"</span>
    <span class="keyword">if</span> <span class="keyword">failed</span> port <span class="number">21</span> <span class="keyword">use</span> <span class="keyword">type</span> tcp <span class="keyword">then</span> restart</span>
</code></pre><h2 id="迅雷">迅雷</h2><p>新建配置文xware_xunlei.conf,</p>
<pre><code>sudo vim /etc/monit/<span class="keyword">conf</span>.<span class="keyword">d</span>/xware_xunlei.<span class="keyword">conf</span>
</code></pre><p>输入，</p>
<pre><code><span class="comment"># sudo vim /etc/monit/conf.d/xware_xunlei.conf</span><span class="instruction">
check </span>process xunlei with matching EmbedThun
    start program = <span class="string">"/home/pi/xunlei/portal"</span>
   <span class="instruction"> if </span>failed port 9002 then restart
   <span class="instruction"> if </span>3 restarts within 5 cycles then timeout
</code></pre><h1 id="重启服务">重启服务</h1><pre><code><span class="title">sudo</span> service monit reload &amp;&amp; sudo service monit restart
</code></pre><p>通过查看log文件，验证monit服务已经启动</p>
<pre><code>sudo tail <span class="attribute">-f</span> /<span class="built_in">var</span>/<span class="keyword">log</span>/monit<span class="built_in">.</span><span class="keyword">log</span>
</code></pre><p>参考：</p>
<ol>
<li><a href="http://www.tecmint.com/how-to-install-and-setup-monit-linux-process-and-services-monitoring-program/" target="_blank" rel="external">http://www.tecmint.com/how-to-install-and-setup-monit-linux-process-and-services-monitoring-program/</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>服务器长时间运行，难免有些服务会挂掉，最好就是采用监控软件来监控关键服务，保证服务挂掉之后能够自动恢复。下面介绍如何使用monit来实现监控：</p>]]>
    
    </summary>
    
      <category term="DIY" scheme="http://mkitby.com/tags/DIY/"/>
    
      <category term="NAS" scheme="http://mkitby.com/tags/NAS/"/>
    
      <category term="Raspberry Pi" scheme="http://mkitby.com/tags/Raspberry-Pi/"/>
    
      <category term="monit" scheme="http://mkitby.com/tags/monit/"/>
    
      <category term="树莓派" scheme="http://mkitby.com/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="Raspberry Pi" scheme="http://mkitby.com/categories/Raspberry-Pi/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Raspberry Pi从零开始搭建低成本NAS(9)-外网登录树莓派]]></title>
    <link href="http://mkitby.com/2016/04/07/raspberry-pi-nas-remote-management/"/>
    <id>http://mkitby.com/2016/04/07/raspberry-pi-nas-remote-management/</id>
    <published>2016-04-07T15:25:50.000Z</published>
    <updated>2016-04-11T12:23:42.753Z</updated>
    <content type="html"><![CDATA[<p>有时候我们可能需要在外网环境下控制家里面的树莓派，根据实际网络情况，提供下面两个方案供选择。</p>
<ul>
<li>外网远程登录树莓派SSH</li>
<li>基于Web的SSH</li>
</ul>
<p>在详细介绍这两种方案之前，我们需要先解决一个问题，如何获取树莓派外网（公网）IP地址？我们的树莓派一般处于路由器后面，外网不可见。</p>
<a id="more"></a>
<h1 id="外网IP地址">外网IP地址</h1><p>有两种方法可以获取到外网IP地址，一，通过Python脚本获取，二，动态域名。因为免费的动态域名时不时会抽风，为了保证可靠性，可以同时使用这两种方法。</p>
<h2 id="Python脚本获取">Python脚本获取</h2><p>这种方法是通过树莓派自己获取公网IP，然后自动发动到指定的Email。创建文件external_ip.py，</p>
<pre><code>sudo <span class="keyword">vim</span> /home/pi/external_ip.<span class="keyword">py</span>
</code></pre><p>输入如下内容，</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> smtplib</span><br><span class="line"><span class="keyword">from</span> email.mime.text <span class="keyword">import</span> MIMEText</span><br><span class="line"></span><br><span class="line"><span class="comment">#############</span></span><br><span class="line"><span class="comment">#To address</span></span><br><span class="line">mailto_list=[<span class="string">"xx@gmail.com"</span>,<span class="string">"xx@126.com"</span>,<span class="string">"xx@hotmail.com"</span>]</span><br><span class="line"><span class="comment">#####################</span></span><br><span class="line"><span class="comment">#Set server, account, password and email postfix</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span><br><span class="line"># no tls</span><br><span class="line">mail_host="smtp.126.com"</span><br><span class="line">mail_user="xx" #用户名</span><br><span class="line">mail_pass="xx" #密码</span><br><span class="line">mail_postfix="126.com"</span><br><span class="line">'''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#tls</span></span><br><span class="line">mail_host=<span class="string">"smtp-mail.outlook.com:587"</span></span><br><span class="line">mail_user=<span class="string">"xx@hotmail.com"</span></span><br><span class="line">mail_pass=<span class="string">"xx"</span></span><br><span class="line">mail_postfix=<span class="string">"hotmail.com"</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span><br><span class="line">#tls</span><br><span class="line">mail_host="smtp.gmail.com:587"</span><br><span class="line">mail_user="xx@gmail.com"</span><br><span class="line">mail_pass="xx"</span><br><span class="line">mail_postfix="gmail.com"</span><br><span class="line">'''</span></span><br><span class="line"><span class="comment">######################</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_mail</span><span class="params">(to_list,sub,content)</span>:</span></span><br><span class="line">    <span class="string">'''</span><br><span class="line">    to_list: to address</span><br><span class="line">    sub:subject</span><br><span class="line">    content:content</span><br><span class="line">    send_mail("aaa@126.com","sub","content")</span><br><span class="line">    '''</span></span><br><span class="line">    me=mail_user+<span class="string">"&lt;"</span>+mail_user+<span class="string">"@"</span>+mail_postfix+<span class="string">"&gt;"</span></span><br><span class="line">    msg = MIMEText(content)</span><br><span class="line">    msg[<span class="string">'Subject'</span>] = sub</span><br><span class="line">    msg[<span class="string">'From'</span>] = me</span><br><span class="line">    msg[<span class="string">'To'</span>] = <span class="string">";"</span>.join(to_list)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s = smtplib.SMTP()</span><br><span class="line">        s.connect(mail_host)</span><br><span class="line">        s.starttls() <span class="comment"># TLS need this</span></span><br><span class="line">        s.login(mail_user,mail_pass)</span><br><span class="line">        s.sendmail(me, to_list, msg.as_string())</span><br><span class="line">        s.close()</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">except</span> Exception, e:</span><br><span class="line">        <span class="keyword">print</span> str(e)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line">current_ip = <span class="keyword">None</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getip</span><span class="params">()</span>:</span></span><br><span class="line">    sock = socket.create_connection((<span class="string">'ns1.dnspod.net'</span>, <span class="number">6666</span>))</span><br><span class="line">    ip = sock.recv(<span class="number">16</span>)</span><br><span class="line">    sock.close()</span><br><span class="line">    <span class="keyword">return</span> ip</span><br><span class="line"></span><br><span class="line"><span class="string">'''</span><br><span class="line">def getip():</span><br><span class="line">    f = urllib.urlopen("http://www.canyouseeme.org/")</span><br><span class="line">    html_doc = f.read()</span><br><span class="line">    f.close()</span><br><span class="line">    m = re.search('(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)',html_doc)</span><br><span class="line">    print m.group(0)</span><br><span class="line">    data=m.group()</span><br><span class="line">    return data</span><br><span class="line">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            ip = getip()</span><br><span class="line">            <span class="comment">#print ip</span></span><br><span class="line">            <span class="keyword">if</span> current_ip != ip:</span><br><span class="line">                <span class="keyword">if</span> send_mail(mailto_list,<span class="string">"Raspberry Pi external ip address"</span>, <span class="string">'Raspberry Pi External IP Addreds is '</span> + ip + <span class="string">' ...!'</span>):</span><br><span class="line">                    current_ip = ip</span><br><span class="line">                    <span class="comment">#print('Send OK')</span></span><br><span class="line">        <span class="keyword">except</span> Exception, e:</span><br><span class="line">            <span class="keyword">print</span> e</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        time.sleep(<span class="number">60</span>) <span class="comment"># Check the ip address every one minute</span></span><br></pre></td></tr></table></figure>
<p>编辑文件rc.local，设置开机自动运行</p>
<pre><code>sudo vim /etc/rc.<span class="keyword">local</span>
</code></pre><p>在 exit 0 之前， 加入以下代码：<br>su root -c “python /home/pi/external_ip.py”</p>
<p>简单介绍一下上面的脚的功能，树莓派开机自动获取公网IP地址并发送到指定邮箱，然后每分钟监测IP是否发生变化，如果变了，则发送变化之后的IP到指定邮箱。需要修改的地方如下：<br>mailto_list里面填想要收到IP的邮箱，可以填多个，发送邮箱我列出了三个邮箱，126，hotmail，gmail（可能被墙，不建议使用），根据自己情况选择一个，如果想用其他邮箱，请自行修改。关于getip()函数，我列了两个，目前在我这两个都能用，请根据自己实际情况选择。</p>
<h2 id="动态域名">动态域名</h2><p>如果路由器支持动态域名（DNS）功能，可以选择这种方法，注册一个动态域名服务，比如花生壳等，然后在路由器里面设置动态DNS，如下图所示。</p>
<div align="center"><br><img src="http://7xnzab.com1.z0.glb.clouddn.com/uploads/raspberry-pi/raspberry-pi-nas-remote-management/figure1.jpg_mkitby" alt=""><br></div>

<h1 id="外网远程登录树莓派SSH">外网远程登录树莓派SSH</h1><p>这种方法我想大家应该不陌生了，前面我们操作树莓派，都是通过登录SSH，只不过是内网登录。外网登录其实没什么区别，就是需要在路由器上做端口映射。<br>如果你所在网络对外只开放了80和8080等web端口，那么这种方法就不怎么好使了，需要修改SSH端口号为80端口，还有更糟糕的情况，恰好你的网络供应商封锁了80和8080等web端口(<a href="http://www.canyouseeme.org/可以查询)，就像我一样，握个抓，目前我所知道的简单有效的方法是用手机来登录SSH，Android平台推荐使用JuiceSSH，有虚拟键键盘，可以很方便输入Tab" target="_blank" rel="external">http://www.canyouseeme.org/可以查询)，就像我一样，握个抓，目前我所知道的简单有效的方法是用手机来登录SSH，Android平台推荐使用JuiceSSH，有虚拟键键盘，可以很方便输入Tab</a>, Ctrl等特殊按键，音量键放大缩小字体，可旋转成横屏，甩ConnectBot几条街，IOS平台可以使用Serverauditor。另外可以通过搭建代理转发服务来实现登录如果还有其他好方法，也欢迎分享。</p>
<h1 id="基于Web的SSH">基于Web的SSH</h1><p>如果幸运，web端口没有被封，那么可以采用基于web的SSH，在任何有网络的地方，只需要浏览器就就可以搞定一切。基于web的SSH软件有很多，我也不一一介绍了，感兴趣的可以自己参考 ，下面我以shellinabox为例介绍，<br>先安装，</p>
<pre><code>sudo apt-<span class="keyword">get</span> install shellinabox -y
</code></pre><p>然后编辑shellinabox配置文件</p>
<pre><code>sudo vim <span class="regexp">/etc/</span><span class="keyword">default</span><span class="regexp">/shellinaboxd</span>
</code></pre><p>更改SHELLINABOX_PORT=4200，为想要的端口。</p>
<pre><code><span class="preprocessor"># Should shellinaboxd start automatically</span>
SHELLINABOX_DAEMON_START=<span class="number">1</span>

<span class="preprocessor"># TCP port that shellinboxd's webserver listens on</span>
SHELLINABOX_PORT=<span class="number">4200</span>

<span class="preprocessor"># Parameters that are managed by the system and usually should not need</span>
<span class="preprocessor"># changing:</span>
<span class="preprocessor"># SHELLINABOX_DATADIR=/var/lib/shellinabox</span>
<span class="preprocessor"># SHELLINABOX_USER=shellinabox</span>
<span class="preprocessor"># SHELLINABOX_GROUP=shellinabox</span>

<span class="preprocessor"># Any optional arguments (e.g. extra service definitions).  Make sure</span>
<span class="preprocessor"># that that argument is quoted.</span>
<span class="preprocessor">#</span>
<span class="preprocessor">#   Beeps are disabled because of reports of the VLC plugin crashing</span>
<span class="preprocessor">#   Firefox on Linux/x86_64.</span>
SHELLINABOX_ARGS=<span class="string">"--no-beep"</span>
</code></pre><p>重启shelinabox服务。</p>
<pre><code><span class="title">sudo</span> service shellinabox restart
</code></pre><p>现在，去你的客户端系统，打开Web浏览器并导航到：<a href="https://ip-address-of-remote-servers:4200。" target="_blank" rel="external">https://ip-address-of-remote-servers:4200。</a><br>如果你改变了端口，请填写修改后的端口。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>有时候我们可能需要在外网环境下控制家里面的树莓派，根据实际网络情况，提供下面两个方案供选择。</p>
<ul>
<li>外网远程登录树莓派SSH</li>
<li>基于Web的SSH</li>
</ul>
<p>在详细介绍这两种方案之前，我们需要先解决一个问题，如何获取树莓派外网（公网）IP地址？我们的树莓派一般处于路由器后面，外网不可见。</p>]]>
    
    </summary>
    
      <category term="DIY" scheme="http://mkitby.com/tags/DIY/"/>
    
      <category term="NAS" scheme="http://mkitby.com/tags/NAS/"/>
    
      <category term="Raspberry Pi" scheme="http://mkitby.com/tags/Raspberry-Pi/"/>
    
      <category term="树莓派" scheme="http://mkitby.com/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="远程管理" scheme="http://mkitby.com/tags/%E8%BF%9C%E7%A8%8B%E7%AE%A1%E7%90%86/"/>
    
      <category term="Raspberry Pi" scheme="http://mkitby.com/categories/Raspberry-Pi/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Raspberry Pi从零开始搭建低成本NAS(8)-迅雷远程下载]]></title>
    <link href="http://mkitby.com/2016/04/06/raspberry-pi-nas-remote-download-xunlei/"/>
    <id>http://mkitby.com/2016/04/06/raspberry-pi-nas-remote-download-xunlei/</id>
    <published>2016-04-06T15:17:00.000Z</published>
    <updated>2016-04-08T13:31:13.166Z</updated>
    <content type="html"><![CDATA[<p>接着之前aria2远程下载，来介绍迅雷远程下载。</p>
<a id="more"></a>
<p>第一步，去迅雷网站下载固件。<a href="http://luyou.xunlei.com/forum-51-1.html" target="_blank" rel="external">http://luyou.xunlei.com/forum-51-1.html</a> 找到最近的下载就可以了，注意Raspberry Pi 使用的是Xware版本号_armel_v5te_glibc.zip。我是用的是第九周的固件“Xware1.0.31_armel_v5te_glibc.zip”。</p>
<p>第二步，在/home/pi文件夹下建立一个文件夹(文件名随便，本文使用xunlei)。</p>
<pre><code><span class="built_in">cd</span> /home/pi
<span class="built_in">mkdir</span> xunlei
</code></pre><p>第三步，在/home/pi/nas-data 文件夹下建立一个文件夹(文件名随便，本文也使用xunlei)。</p>
<pre><code><span class="built_in">cd</span> /home/pi/nas-data
<span class="built_in">mkdir</span> xunlei
</code></pre><p>第四步，将两者挂载起来。</p>
<pre><code>sudo mount --bind <span class="regexp">/home/</span>pi<span class="regexp">/xunlei /</span>home<span class="regexp">/pi/</span>nas-data<span class="regexp">/xunlei</span>
</code></pre><p>第五步，然后把迅雷固件复制到/home/pi/xunlei文件夹</p>
<pre><code>cd /home/pi
cp Xware1<span class="number">.0</span><span class="number">.31</span>_armel_v5te_glibc.zip xunlei
</code></pre><p>第六步，解压Xware1.0.9_armel_v5te_glibc.zip</p>
<pre><code><span class="tag">cd</span> <span class="tag">xunlei</span>
<span class="tag">unzip</span> <span class="tag">Xware1</span><span class="class">.0</span><span class="class">.9_armel_v5te_glibc</span><span class="class">.zip</span>
</code></pre><p>第七步，修改读写权限</p>
<pre><code>sudo chmod -R <span class="number">777</span> <span class="regexp">/home/</span>pi/xunlei
sudo chmod -R <span class="number">777</span> <span class="regexp">/home/</span>pi<span class="regexp">/nas-data/</span>xunlei
</code></pre><p>第八步，运行迅雷，查看code</p>
<pre><code><span class="regexp">/home/</span>pi<span class="regexp">/xunlei/</span>portal
</code></pre><p>如果提示权限不够，运行</p>
<pre><code>sudo <span class="regexp">/home/</span>pi<span class="regexp">/xunlei/</span>portal
</code></pre><p>运行结果如下图所示：</p>
<div align="center"><br><img src="http://7xnzab.com1.z0.glb.clouddn.com/uploads/raspberry-pi/raspberry-pi-nas-remote-download-xunlei/figure1.jpg_mkitby" alt=""><br></div>

<p>牢记上面的Code，我的是qaefef。 在浏览器输入当前树莓派的IP：<a href="http://IP:9001/getsysinfo" target="_blank" rel="external">http://IP:9001/getsysinfo</a></p>
<div align="center"><br><img src="http://7xnzab.com1.z0.glb.clouddn.com/uploads/raspberry-pi/raspberry-pi-nas-remote-download-xunlei/figure2.jpg_mkitby" alt=""><br></div>

<p>第一项：0表示返回结果成功<br>第二项： 1表示检测网络正常，0表示检测网络异常<br>第四项： 1表示已绑定成功，0表示未绑定<br>第五项： 未绑定的情况下，为绑定的需要的激活码   （这里获得的激活码呆会绑定要用，激活码不需要购买，ps迅雷远程下载不是破解的，是官方发布的）<br>第六项： 1表示磁盘挂载检测成功，0表示磁盘挂载检测失败<br>使用迅雷帐号登录迅雷远程下载页面<a href="http://yuancheng.xunlei.com，点【添加】，并填入激活码，点【确定】即绑定成功。当绑定成功后红色叉处即可解除绑定。" target="_blank" rel="external">http://yuancheng.xunlei.com，点【添加】，并填入激活码，点【确定】即绑定成功。当绑定成功后红色叉处即可解除绑定。</a><br>第九步，让我们绑定Pi设备到远程下载。<br>游览器访问<a href="http://yuancheng.xunlei.com，点击左上角的【添加】按钮，在弹出的对话框里面输入刚刚的激活码：qaefef，如下图：" target="_blank" rel="external">http://yuancheng.xunlei.com，点击左上角的【添加】按钮，在弹出的对话框里面输入刚刚的激活码：qaefef，如下图：</a></p>
<div align="center"><br><img src="http://7xnzab.com1.z0.glb.clouddn.com/uploads/raspberry-pi/raspberry-pi-nas-remote-download-xunlei/figure3.jpg_mkitby" alt=""><br></div>

<p>第十步，保险起见，让我们再去把目录的权限再设置一下吧，因为已经生成了新的文件了</p>
<pre><code>sudo chmod -R <span class="number">777</span> <span class="regexp">/home/</span>pi/xunlei
sudo chmod -R <span class="number">777</span> <span class="regexp">/home/</span>pi<span class="regexp">/nas-data/</span>xunlei
</code></pre><p>第十一步，在<a href="http://yuancheng.xunlei.com里面新建个任务试试看。和一般的迅雷操作差不多的。注意下载器选择树莓派" target="_blank" rel="external">http://yuancheng.xunlei.com里面新建个任务试试看。和一般的迅雷操作差不多的。注意下载器选择树莓派</a></p>
<div align="center"><br><img src="http://7xnzab.com1.z0.glb.clouddn.com/uploads/raspberry-pi/raspberry-pi-nas-remote-download-xunlei/figure4.jpg_mkitby" alt=""><br></div>

<p>第十二步，下载的文件在哪里？<br>Xware软件会自动检测在机器上已经mount的，且有写入权限的设备，如果有，在远程下载页面中添加下载任务时就可以看到。如果有多个可写入的设备，那就依次编号为C、D、E…等，可以在添加下载任务时选择其中一个。</p>
<pre><code>cd <span class="regexp">/home/</span>pi<span class="regexp">/xunlei/</span>TDDOWNLOAD
</code></pre><p>下载目录 /home/pi/nas-data/TDDOWNLOAD</p>
<p>最后设置开机自动绑定，并且自动启动迅雷。</p>
<pre><code>sudo vim /etc/rc.<span class="keyword">local</span>
</code></pre><p>在 exit 0 之前， 加入以下代码：</p>
<pre><code>sudo mount --bind <span class="regexp">/home/</span>pi<span class="regexp">/xunlei/</span> <span class="regexp">/home/</span>pi<span class="regexp">/nas-data/</span>xunlei/
.<span class="regexp">/home/</span>pi<span class="regexp">/xunlei/</span>portal
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<p>接着之前aria2远程下载，来介绍迅雷远程下载。</p>]]>
    
    </summary>
    
      <category term="DIY" scheme="http://mkitby.com/tags/DIY/"/>
    
      <category term="NAS" scheme="http://mkitby.com/tags/NAS/"/>
    
      <category term="Raspberry Pi" scheme="http://mkitby.com/tags/Raspberry-Pi/"/>
    
      <category term="树莓派" scheme="http://mkitby.com/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="远程下载" scheme="http://mkitby.com/tags/%E8%BF%9C%E7%A8%8B%E4%B8%8B%E8%BD%BD/"/>
    
      <category term="Raspberry Pi" scheme="http://mkitby.com/categories/Raspberry-Pi/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Raspberry Pi从零开始搭建低成本NAS(7)-Aria2远程下载]]></title>
    <link href="http://mkitby.com/2016/01/15/raspberry-pi-nas-remote-download-aria2/"/>
    <id>http://mkitby.com/2016/01/15/raspberry-pi-nas-remote-download-aria2/</id>
    <published>2016-01-15T14:30:44.000Z</published>
    <updated>2016-04-11T12:24:59.558Z</updated>
    <content type="html"><![CDATA[<p>远程下载内容比较多，所以分为两篇文章，先介绍Aria2，再介绍迅雷。</p>
<p>Aria2是一个轻量级命令行下载工具，支持HTTP/HTTPS, FTP, SFTP, BitTorrent and Metalink下载，但是不支持ed2k，支持JSON-RPC和XML-RPC调用，可以远程控制。</p>
<a id="more"></a>
<p>1.先安装aria2</p>
<pre><code>sudo apt-<span class="keyword">get</span> install aria2 –y
</code></pre><p>2.创建 aria2 配置文件 “/home/pi/.aria2/aria2.conf” 和 “/home/pi/.aria2/aria2.session” 这个文件 (我是以 pi 账户启动 aria2 的),</p>
<pre><code>mkdir <span class="regexp">/home/</span>pi/.aria2
touch <span class="regexp">/home/</span>pi<span class="regexp">/.aria2/</span>aria2.session
vim <span class="regexp">/home/</span>pi<span class="regexp">/.aria2/</span>aria2.conf
</code></pre><p>配置文件内容如下。</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor"># 基本配置</span></span><br><span class="line"><span class="preprocessor"># 下载目录</span></span><br><span class="line">dir=/home/pi/nas-data/Inbox</span><br><span class="line"><span class="preprocessor"># 下载从这个文件中找到的urls, 需自己建立这个文件</span></span><br><span class="line"><span class="preprocessor"># touch /home/pi/.aria2/aria2.session</span></span><br><span class="line">input-file=/home/pi/.aria2/aria2.session</span><br><span class="line"><span class="preprocessor"># 最大同时下载任务数，默认 5</span></span><br><span class="line"><span class="preprocessor">#max-concurrent-downloads=5</span></span><br><span class="line"><span class="preprocessor"># 断点续传，只适用于 HTTP(S)/FTP</span></span><br><span class="line">continue=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># HTTP/FTP 配置</span></span><br><span class="line"><span class="preprocessor"># 关闭连接如果下载速度等于或低于这个值，默认 0</span></span><br><span class="line"><span class="preprocessor">#lowest-speed-limit=0</span></span><br><span class="line"><span class="preprocessor"># 对于每个下载在同一个服务器上的连接数，默认 1</span></span><br><span class="line">max-connection-per-server=<span class="number">5</span></span><br><span class="line"><span class="preprocessor"># 每个文件最小分片大小，例如文件 20M，设置 size 为 10M, 则用2个连接下载，默认 20M</span></span><br><span class="line"><span class="preprocessor">#min-split-size=10M</span></span><br><span class="line"><span class="preprocessor"># 下载一个文件的连接数，默认 5</span></span><br><span class="line"><span class="preprocessor">#split=5</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># BT 特殊配置</span></span><br><span class="line"><span class="preprocessor"># 启用本地节点查找，默认 false</span></span><br><span class="line">bt-enable-lpd=<span class="literal">true</span></span><br><span class="line"><span class="preprocessor"># 指定最大文件数对于每个 bt 下载，默认 100</span></span><br><span class="line"><span class="preprocessor">#bt-max-open-files=100</span></span><br><span class="line"><span class="preprocessor"># 单种子最大连接数，默认 55</span></span><br><span class="line"><span class="preprocessor">#bt-max-peers=55</span></span><br><span class="line"><span class="preprocessor"># 设置最低的加密级别，可选全连接加密 arc4，默认是头加密 plain</span></span><br><span class="line"><span class="preprocessor">#bt-min-crypto-level=plain</span></span><br><span class="line"><span class="preprocessor"># 总是使用 obfuscation handshake，防迅雷必备，默认 false</span></span><br><span class="line">bt-require-crypto=<span class="literal">true</span></span><br><span class="line"><span class="preprocessor"># 如果下载的是种子文件则自动解析并下载，默认 true</span></span><br><span class="line"><span class="preprocessor">#follow-torrent=true</span></span><br><span class="line"><span class="preprocessor"># 为 BT 下载设置 TCP 端口号，确保开放这些端口，默认 6881-6999</span></span><br><span class="line">listen-port=<span class="number">65298</span></span><br><span class="line"><span class="preprocessor">#Set UDP listening port used by DHT(IPv4, IPv6) and UDP tracker</span></span><br><span class="line">dht-listen-port=<span class="number">65298</span></span><br><span class="line"><span class="preprocessor"># 整体上传速度限制，0 表示不限制，默认 0</span></span><br><span class="line"><span class="preprocessor">#max-overall-upload-limit=0</span></span><br><span class="line"><span class="preprocessor"># 每个下载上传速度限制，默认 0</span></span><br><span class="line"><span class="preprocessor">#max-upload-limit=0</span></span><br><span class="line"><span class="preprocessor"># 种子分享率大于1, 则停止做种，默认 1.0</span></span><br><span class="line"><span class="preprocessor">#seed-ratio=1</span></span><br><span class="line"><span class="preprocessor"># 做种时间大于2小时，则停止做种</span></span><br><span class="line">seed-time=<span class="number">120</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># RPC 配置</span></span><br><span class="line"><span class="preprocessor"># 开启 JSON-RPC/XML-RPC 服务，默认 false</span></span><br><span class="line">enable-rpc=<span class="literal">true</span></span><br><span class="line"><span class="preprocessor"># 允许所有来源，web 界面跨域权限需要，默认 false</span></span><br><span class="line">rpc-allow-origin-all=<span class="literal">true</span></span><br><span class="line"><span class="preprocessor"># 允许外部访问，默认 false</span></span><br><span class="line">rpc-listen-all=<span class="literal">true</span></span><br><span class="line"><span class="preprocessor"># rpc 端口，默认 6800</span></span><br><span class="line">rpc-listen-port=<span class="number">6800</span></span><br><span class="line"><span class="preprocessor"># 设置最大的 JSON-RPC/XML-RPC 请求大小，默认 2M</span></span><br><span class="line"><span class="preprocessor">#rpc-max-request-size=2M</span></span><br><span class="line"><span class="preprocessor"># rpc 密码，可不设置</span></span><br><span class="line"><span class="preprocessor">#rpc-passwd=raspberry</span></span><br><span class="line"><span class="preprocessor"># rpc 用户名，可不设置</span></span><br><span class="line"><span class="preprocessor">#rpc-user=aria2pi</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 高级配置</span></span><br><span class="line"><span class="preprocessor"># This is useful if you have to use broken DNS and</span></span><br><span class="line"><span class="preprocessor"># want to avoid terribly slow AAAA record lookup.</span></span><br><span class="line"><span class="preprocessor"># 默认 false</span></span><br><span class="line">disable-ipv6=<span class="literal">true</span></span><br><span class="line"><span class="preprocessor"># 指定文件分配方法，预分配能有效降低文件碎片，提高磁盘性能，缺点是预分配时间稍长</span></span><br><span class="line"><span class="preprocessor"># 如果使用新的文件系统，例如 ext4 (with extents support), btrfs, xfs or NTFS(MinGW build only), falloc 是最好的选择</span></span><br><span class="line"><span class="preprocessor"># 如果设置为 none，那么不预先分配文件空间，默认 prealloc</span></span><br><span class="line">file-allocation=falloc</span><br><span class="line"><span class="preprocessor"># 整体下载速度限制，默认 0</span></span><br><span class="line"><span class="preprocessor">#max-overall-download-limit=0</span></span><br><span class="line"><span class="preprocessor"># 每个下载下载速度限制，默认 0</span></span><br><span class="line"><span class="preprocessor">#max-download-limit=0</span></span><br><span class="line"><span class="preprocessor"># 保存错误或者未完成的下载到这个文件</span></span><br><span class="line"><span class="preprocessor"># 和基本配置中的 input-file 一起使用，那么重启后仍可继续下载</span></span><br><span class="line">save-session=/home/pi/.aria2/aria2.session</span><br><span class="line"><span class="preprocessor"># 每5分钟自动保存错误或未完成的下载，如果为 0, 只有 aria2 正常退出才回保存，默认 0</span></span><br><span class="line">save-session-interval=<span class="number">300</span></span><br><span class="line"></span><br><span class="line"><span class="preprocessor"># 若要用于 PT 下载，需另外的配置，这里没写</span></span><br></pre></td></tr></table></figure>
<p>RPC调用加入验证（外网调用最好加上验证），可以采用下面两种方式：</p>
<p>1) 使用token验证（建议使用，需要1.18.4以上版本，帐号密码方式将在后续版本中停用！）</p>
<pre><code><span class="comment"># token验证</span>
<span class="setting">rpc-secret=<span class="value">secret</span></span>
</code></pre><p>在YAAW中使用 <a href="http://token:secret@hostname:port/jsonrpc" target="_blank" rel="external">http://token:secret@hostname:port/jsonrpc</a> 的地址格式设置secret.</p>
<p>2 )如果需要使用密码验证（需要1.15.2以上，1.18.6以下版本）</p>
<pre><code><span class="comment">#用户名</span>
<span class="setting">rpc-user=<span class="value">username</span></span>
<span class="comment">#密码</span>
<span class="setting">rpc-passwd=<span class="value">passwd</span></span>
</code></pre><p>在YAAW中使用 <a href="http://username:passwd@hostname:port/jsonrpc" target="_blank" rel="external">http://username:passwd@hostname:port/jsonrpc</a> 的地址格式设置密码.</p>
<p>3.运行 aria2, 测试配置是否有错误，如果没有提示任何错误信息，那就按Ctrl+C停止。</p>
<pre><code>aria2c --conf-path=<span class="regexp">/home/pi</span><span class="regexp">/.aria2/aria</span>2.conf
</code></pre><p>4.为 aria2 添加自启动服务</p>
<p>1) 新建 sudo vim /etc/init.d/aria2c 文件，输入以下内容</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#! /bin/sh</span></span><br><span class="line"><span class="comment"># /etc/init.d/aria2c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### BEGIN INIT INFO</span></span><br><span class="line"><span class="comment"># Provides: aria2c</span></span><br><span class="line"><span class="comment"># Required-Start:    $network $local_fs $remote_fs</span></span><br><span class="line"><span class="comment"># Required-Stop:     $network $local_fs $remote_fs</span></span><br><span class="line"><span class="comment"># Default-Start:     2 3 4 5</span></span><br><span class="line"><span class="comment"># Default-Stop:      0 1 6</span></span><br><span class="line"><span class="comment"># Short-Description: aria2c RPC init script.</span></span><br><span class="line"><span class="comment"># Description: Starts and stops aria2 RPC services.</span></span><br><span class="line"><span class="comment">### END INIT INFO</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#VAR</span></span><br><span class="line">RUN=<span class="string">"/usr/bin/aria2c"</span></span><br><span class="line">ARIA_PID=$(ps ux | awk <span class="string">'/aria2c --daemon=true --enable-rpc/ &amp;&amp; !/awk/ &#123;print $2&#125;'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Carry out specific functions when asked to by the system</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">"<span class="variable">$1</span>"</span> <span class="keyword">in</span></span><br><span class="line">  start)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Starting script aria2c "</span></span><br><span class="line">    <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$ARIA_PID</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">      <span class="variable">$RUN</span> --daemon=<span class="literal">true</span> --enable-rpc=<span class="literal">true</span> -D --conf-path=/home/pi/.aria2/aria2.conf</span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"Started"</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"aria2c already started"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    ;;</span><br><span class="line">  stop)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Stopping script aria2c"</span></span><br><span class="line">    <span class="keyword">if</span> [ ! -z <span class="string">"<span class="variable">$ARIA_PID</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">kill</span> <span class="variable">$ARIA_PID</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"OK"</span></span><br><span class="line">    ;;</span><br><span class="line">  restart)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Restarting script aria2c"</span></span><br><span class="line">    <span class="keyword">if</span> [ ! -z <span class="string">"<span class="variable">$ARIA_PID</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">kill</span> <span class="variable">$ARIA_PID</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    sleep <span class="number">3</span>   <span class="comment"># <span class="doctag">TODO:</span>Maybe need to be adjust</span></span><br><span class="line">    <span class="variable">$RUN</span> --daemon=<span class="literal">true</span> --enable-rpc=<span class="literal">true</span> -D --conf-path=/home/pi/.aria2/aria2.conf</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"OK"</span></span><br><span class="line">    ;;</span><br><span class="line">  status)</span><br><span class="line">    <span class="keyword">if</span> [ ! -z <span class="string">"<span class="variable">$ARIA_PID</span>"</span> ]; <span class="keyword">then</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"The aria2c is running with PID = "</span><span class="variable">$ARIA_PID</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      <span class="built_in">echo</span> <span class="string">"No process found for aria2c RPC"</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    ;;</span><br><span class="line">  *)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">"Usage: /etc/init.d/aria2c &#123;start|stop|restart|status&#125;"</span></span><br><span class="line">    <span class="built_in">exit</span> <span class="number">1</span></span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="built_in">exit</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>2) 添加可执行权限</p>
<pre><code>sudo chmod +x <span class="regexp">/etc/i</span>nit.d<span class="regexp">/aria2c</span>
</code></pre><p>3) 然后更新rc，添加自启动服务</p>
<pre><code>sudo <span class="operator"><span class="keyword">update</span>-rc.<span class="keyword">d</span> aria2c <span class="keyword">defaults</span></span>
</code></pre><p>4) 最后重启aria2c服务</p>
<pre><code><span class="title">sudo</span> service aria2c restart
</code></pre><p>5.安装web 前端yaaw或者webui-aria2来实现web管理</p>
<p>yaaw 和 webui-aria2 都是不错的，yaaw 界面简洁，wubui-aria2 功能强大，可以根据自己的喜好来选择。</p>
<p>1) 首先需要安装需要安装 nginx</p>
<pre><code>sudo apt-<span class="keyword">get</span> install nginx –y
</code></pre><p>2) 接下来我们来配置nginx，首先打开配置文件，/etc/nginx/nginx.conf ，按照下面的配置进行修改。</p>
<figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">user</span> www-data; <span class="comment">#默认以www-data运行工作进程</span></span><br><span class="line"><span class="title">worker_processes</span> <span class="number">1</span>; <span class="comment">#单工作进程足够了，就我自己访问</span></span><br><span class="line"><span class="title">worker_connections</span> <span class="number">256</span>; <span class="comment">#一般支持100在线连接就达到raspberry pi的极限了</span></span><br><span class="line"><span class="title">gzip</span> <span class="built_in">on</span>;  <span class="comment">#gzip开启取消前面的#让默认设置生效即可，可以加快网页访问速度</span></span><br><span class="line"><span class="title">gzip_disable</span> <span class="string">"msie6"</span>;</span><br><span class="line"><span class="title">gzip_vary</span> <span class="built_in">on</span>;</span><br><span class="line"><span class="title">gzip_proxied</span> any;</span><br><span class="line"><span class="title">gzip_comp_level</span> <span class="number">6</span>;</span><br><span class="line"><span class="title">gzip_buffers</span> <span class="number">16</span> <span class="number">8k</span>;</span><br><span class="line"><span class="title">gzip_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line"><span class="title">gzip_types</span> text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;</span><br></pre></td></tr></table></figure>
<p>3) 配置站点属性</p>
<pre><code>sudo vim <span class="regexp">/etc/</span>nginx<span class="regexp">/sites-availiable/</span><span class="keyword">default</span>
</code></pre><p>输入，</p>
<pre><code><span class="xml">server </span><span class="expression">{
<span class="variable">listen</span> 81; <span class="begin-block"># </span>访问端口号
<span class="begin-block">#listen </span>[::]:80 <span class="variable"><span class="keyword">default</span></span>_<span class="variable">server</span>; <span class="begin-block"># </span>一定要注释掉，<span class="variable">ipv</span>6
<span class="variable">server</span>_<span class="variable">name</span> <span class="variable">pi.com</span>;
<span class="variable">root</span> <span class="end-block">/var</span><span class="end-block">/www</span><span class="end-block">/html</span>; #站点存储位置</span>
</code></pre><p>4) 测试配置文件看有没有问题</p>
<pre><code><span class="title">sudo</span> nginx -t
</code></pre><p>如果没有问题会显示</p>
<pre><code>nginx: the configuration <span class="keyword">file</span> /etc/nginx/nginx.<span class="keyword">conf</span> <span class="keyword">syntax</span> is ok
nginx: configuration <span class="keyword">file</span> /etc/nginx/nginx.<span class="keyword">conf</span> <span class="keyword">test</span> is successful
</code></pre><p>5) 创建目录，然后设置权限</p>
<pre><code>sudo <span class="keyword">mkdir</span> /<span class="keyword">var</span>/www &amp;&amp; sudo <span class="keyword">mkdir</span> /<span class="keyword">var</span>/www/html
sudo chown -R www-data:www-data /<span class="keyword">var</span>/www/html
sudo chmod -R 0755 /<span class="keyword">var</span>/www/html
</code></pre><p>6) 下载webui-aria2</p>
<pre><code>sudo git <span class="keyword">clone</span> <span class="title">https</span>://github.com/ziahamza/webui-aria2.git /var/www/html/
</code></pre><p>7) 重新启动nginx服务</p>
<pre><code><span class="title">sudo</span> service nginx restart
</code></pre><p>到这一步了，现在我们通过<a href="http://192.168.1.118:81/webui-aria2/" target="_blank" rel="external">http://192.168.1.118:81/webui-aria2/</a> 来访问，如果提示链接到aria2 RPC server失败，重启aria2c服务，然后刷新网页即可。</p>
<p>6.Aria2定时下载功能</p>
<p>1) 首先创建定时下载脚本，sudo vim /home/pi/.aria2/aria2_auto.py，输入如下内容，</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line">import urllib2, json, <span class="tag">time</span></span><br><span class="line"></span><br><span class="line">WEEKDAY = <span class="function"><span class="title">int</span><span class="params">(time.strftime(<span class="string">'%w'</span>)</span></span>)</span><br><span class="line">HOUR = <span class="function"><span class="title">int</span><span class="params">(time.strftime(<span class="string">'%H'</span>)</span></span>)</span><br><span class="line">jsonreq_pauseAll   = json.<span class="function"><span class="title">dumps</span><span class="params">(&#123;<span class="string">'jsonrpc'</span>:<span class="string">'2.0'</span>, <span class="string">'id'</span>:<span class="string">'qwer'</span>,<span class="string">'method'</span>:<span class="string">'aria2.pauseAll'</span>&#125;)</span></span></span><br><span class="line">jsonreq_unpauseAll = json.<span class="function"><span class="title">dumps</span><span class="params">(&#123;<span class="string">'jsonrpc'</span>:<span class="string">'2.0'</span>, <span class="string">'id'</span>:<span class="string">'qwer'</span>,<span class="string">'method'</span>:<span class="string">'aria2.unpauseAll'</span>&#125;)</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> WEEKDAY <span class="keyword">in</span> [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]:</span><br><span class="line">  <span class="keyword">if</span> HOUR == <span class="number">1</span>:</span><br><span class="line">    urllib2.<span class="function"><span class="title">urlopen</span><span class="params">(<span class="string">'http://localhost:6800/jsonrpc'</span>, jsonreq_unpauseAll)</span></span></span><br><span class="line">  <span class="keyword">if</span> HOUR == <span class="number">17</span>:</span><br><span class="line">    urllib2.<span class="function"><span class="title">urlopen</span><span class="params">(<span class="string">'http://localhost:6800/jsonrpc'</span>, jsonreq_pauseAll)</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> WEEKDAY <span class="keyword">in</span> [<span class="number">6</span>,<span class="number">0</span>]:</span><br><span class="line">  <span class="keyword">if</span> HOUR == <span class="number">2</span>:</span><br><span class="line">    urllib2.<span class="function"><span class="title">urlopen</span><span class="params">(<span class="string">'http://localhost:6800/jsonrpc'</span>, jsonreq_unpauseAll)</span></span></span><br><span class="line">  <span class="keyword">if</span> HOUR == <span class="number">9</span>:</span><br><span class="line">urllib2.<span class="function"><span class="title">urlopen</span><span class="params">(<span class="string">'http://localhost:6800/jsonrpc'</span>, jsonreq_pauseAll)</span></span></span><br></pre></td></tr></table></figure>
<p>上面代码的意思就是周一到周五1:00~17:00，周末两天2:00~9:00，开启全部下载任务，其他时间暂停全部下载任务。然后加入cron实现定时运行</p>
<pre><code>sudo crontab <span class="operator">-e</span>
</code></pre><p>在文件末尾加入</p>
<pre><code>0 <span class="keyword">*</span> <span class="keyword">*</span> <span class="keyword">*</span> <span class="keyword">*</span> /usr/bin/python2 /home/pi/.aria2/aria2_auto.py
</code></pre><p>表示每个小时运行一次脚本。</p>
<p>7.BT端口映射</p>
<p>上面BT监听TCP, UDP端口都为65298，需要在路由器里面设置端口映射，服务端口号填65298，IP地址填树莓派内网IP地址192.168.1.118。</p>
<p>8.外网访问webui-aria2</p>
<p>下面会考虑三种典型的网络环境，前提都是路由器WAN是公网IP。</p>
<p>第一种网络环境：</p>
<p>Raspberry Pi的本地网络供应商80, 8080端口没有被封，从外网能正常访问，这个最简单了，修改树莓派nginx站点属性配置，把端口改为80, 然后在路由器上设置端口映射，80端口映射到树莓派上，然后路由器绑定动态域名，这样通过动态域名就可以在外网直接访问Aria2。</p>
<p>第二种网络环境：<br>Raspberry Pi的本地网络供应商80, 8080端口被封，你所在其他网络能正常访问外网，修改树莓派nginx站点属性配置，把端口改为81（或者其他能访问的端口），同样在路由上设置端口映射，绑定动态域名。</p>
<p>第三种网络环境：<br>Raspberry Pi的本地网络供应商80, 8080端口被封，公司只开放80, 8080端口。那么如何在公司畅快的远程下载呢？下面介绍我是如何实现的：</p>
<p>1) 首先需要有一台VPS，通过搭建nginx反向代理服务来实现远程下载。</p>
<p>配置nginx</p>
<pre><code>sudo <span class="keyword">vim</span> /etc/nginx/nginx.<span class="keyword">conf</span>
</code></pre><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="title">user</span> nginx;</span><br><span class="line"><span class="title">worker_processes</span> <span class="number">1</span>;</span><br><span class="line"><span class="comment">#error_log logs/error.log;</span></span><br><span class="line"><span class="comment">#pid logs/nginx.pid;</span></span><br><span class="line"><span class="title">worker_rlimit_nofile</span> <span class="number">65535</span>;</span><br><span class="line"><span class="title">events</span> &#123;</span><br><span class="line">    <span class="title">use</span> <span class="built_in">epoll</span>;</span><br><span class="line">    <span class="title">worker_connections</span> <span class="number">65535</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title">http</span> &#123;</span><br><span class="line">    <span class="title">include</span> mime.types;</span><br><span class="line">    <span class="title">default_type</span> application/octet-stream;</span><br><span class="line">    <span class="title">include</span> /etc/nginx/conf.d/<span class="regexp">*.conf</span>;</span><br><span class="line">    <span class="title">sendfile</span> <span class="built_in">on</span>;</span><br><span class="line">    <span class="title">keepalive_timeout</span> <span class="number">65</span>;</span><br><span class="line">    <span class="title">gzip</span> <span class="built_in">on</span>;</span><br><span class="line">    <span class="title">client_max_body_size</span> <span class="number">50m</span>;</span><br><span class="line">    <span class="title">client_body_buffer_size</span> <span class="number">256k</span>;</span><br><span class="line">    <span class="title">client_header_timeout</span> <span class="number">3m</span>;</span><br><span class="line">    <span class="title">client_body_timeout</span> <span class="number">3m</span>;</span><br><span class="line">    <span class="title">send_timeout</span> <span class="number">3m</span>;</span><br><span class="line">    <span class="title">proxy_connect_timeout</span> <span class="number">300s</span>;</span><br><span class="line">    <span class="title">proxy_read_timeout</span> <span class="number">300s</span>;</span><br><span class="line">    <span class="title">proxy_send_timeout</span> <span class="number">300s</span>;</span><br><span class="line">    <span class="title">proxy_buffer_size</span> <span class="number">64k</span>;</span><br><span class="line">    <span class="title">proxy_buffers</span> <span class="number">4</span> <span class="number">32k</span>;</span><br><span class="line">    <span class="title">proxy_busy_buffers_size</span> <span class="number">64k</span>;</span><br><span class="line">    <span class="title">proxy_temp_file_write_size</span> <span class="number">64k</span>;</span><br><span class="line">    <span class="title">proxy_ignore_client_abort</span> <span class="built_in">on</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2) 创建反向代理配置文件</p>
<pre><code>sudo vim /etc/nginx/<span class="keyword">conf</span>.<span class="keyword">d</span>/reverser-proxy.<span class="keyword">conf</span>
</code></pre><p>输入内容</p>
<figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">    listen <span class="number">8080</span>;</span><br><span class="line">    server_name xxx.xxx.xxx.xxx; #VPS IP Address</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">        proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote</span>_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy</span>_add_x_forwarded_for;</span><br><span class="line">        proxy_pass http://xxxx.oicp.net:<span class="number">6800</span>;  # RPC web address, http://xxxx.oicp.net 为动态域名</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">    listen <span class="number">80</span>;</span><br><span class="line">    server_name xxx.xxx.xxx.xxx; #VPS IP Address</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">        proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">        proxy_set_header X-Real-IP <span class="variable">$remote</span>_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy</span>_add_x_forwarded_for;</span><br><span class="line">        proxy_pass http://xxxx.oicp.net:<span class="number">81</span>; #aria2 web gui</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3) 路由器添加端口映射，81(webgui), 6800(rpc)端口。<br>4) 通过<a href="http://xxx.xxx.xxx.xxx" target="_blank" rel="external">http://xxx.xxx.xxx.xxx</a> 访问aria2 web gui, aria2采用token验证，通过<a href="http://token:secret@" target="_blank" rel="external">http://token:secret@</a> xxx.xxx.xxx.xxx:8080/jsonrpc访问RPC,  xxx.xxx.xxx.xxx为VPS IP地址。</p>
<p>这三种情况下都需要动态域名来绑定到路由器IP地址。关于动态域名，如果不清楚的，可以参考我后面的文章 <a href="/2016/04/07/raspberry-pi-nas-remote-management/">Raspberry Pi从零开始搭建低成本NAS(9)-外网登录树莓派</a>。里面会介绍动态域名，还会介绍不通过动态域名，如何在外网来访问树莓派。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>远程下载内容比较多，所以分为两篇文章，先介绍Aria2，再介绍迅雷。</p>
<p>Aria2是一个轻量级命令行下载工具，支持HTTP/HTTPS, FTP, SFTP, BitTorrent and Metalink下载，但是不支持ed2k，支持JSON-RPC和XML-RPC调用，可以远程控制。</p>]]>
    
    </summary>
    
      <category term="DIY" scheme="http://mkitby.com/tags/DIY/"/>
    
      <category term="NAS" scheme="http://mkitby.com/tags/NAS/"/>
    
      <category term="Raspberry Pi" scheme="http://mkitby.com/tags/Raspberry-Pi/"/>
    
      <category term="树莓派" scheme="http://mkitby.com/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="远程下载" scheme="http://mkitby.com/tags/%E8%BF%9C%E7%A8%8B%E4%B8%8B%E8%BD%BD/"/>
    
      <category term="Raspberry Pi" scheme="http://mkitby.com/categories/Raspberry-Pi/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Raspberry Pi从零开始搭建低成本NAS(6)-文件共享]]></title>
    <link href="http://mkitby.com/2015/12/08/raspberry-pi-nas-file-sharing/"/>
    <id>http://mkitby.com/2015/12/08/raspberry-pi-nas-file-sharing/</id>
    <published>2015-12-08T13:40:27.000Z</published>
    <updated>2015-12-13T09:46:57.818Z</updated>
    <content type="html"><![CDATA[<p>为了方便访问树莓派的存储设备，有必要为其添加文件共享，下面为给出三种文件访问方法：samba, ftp, web file server</p>
<a id="more"></a>
<h1 id="Samba">Samba</h1><p>安装samba所需软件<br>sudo apt-get install samba samba-common-bin –y</p>
<p>先备份，然后编辑/etc/samba/smb.conf文件</p>
<pre><code>sudo cp /etc/samba/smb<span class="class">.conf</span> /etc/samba/smb<span class="class">.conf</span><span class="class">.orig</span>
sudo vim /etc/samba/smb.conf
</code></pre><p>创建shares文件夹</p>
<pre><code>mkdir <span class="regexp">/home/</span>pi<span class="regexp">/nas-data/</span>DLNA<span class="regexp">/shares</span>
</code></pre><p>需要修改添加的内容如下，</p>
<pre><code>[global]
<span class="constant">security</span> = user
encrypt passwords = true
guest account = nobody
map to guest = bad user

<span class="comment">#======================= Share Definitions =======================</span>
[share]
<span class="constant">comment</span> = Guest access shares
<span class="constant">path</span> = /home/pi/nas-data/shares
<span class="constant">browseable</span> = yes
<span class="constant">writable</span> = yes
<span class="comment">#read only = yes</span>
guest ok = yes
<span class="constant">public</span> = yes

[NAS-Data]
<span class="constant">comment</span> = Nas data folder
<span class="constant">path</span> = /home/pi/nas-data/
<span class="constant">browseable</span> = yes
<span class="constant">writable</span> = yes
valid users = root pi

[USBHDD]
<span class="constant">comment</span> = Media folder
<span class="constant">path</span> = /home/pi/usbhdd
<span class="constant">browseable</span> = yes
<span class="constant">writable</span> = yes
valid users = root pi
</code></pre><p>share共享目录访问不需要密码，而NAS-Data, USBHDD访问需要验证，用户为root和pi。</p>
<p>最后重启samba服务。然后同一局域网的其他设备就可以访问RPi的共享目录</p>
<pre><code><span class="title">sudo</span> service samba restart
</code></pre><p>Android可以使用ES File Explorer，IOS可以使用FileExplorer, FileBrowser, Documents和Remote File Free，或其他支持访问共享的文件管理器。</p>
<h1 id="FTP">FTP</h1><p>安装vsftp，开源的轻量级的常用ftp服务器</p>
<pre><code>sudo apt-<span class="keyword">get</span> install vsftpd
</code></pre><p>先备份，然后编辑配置文件,</p>
<pre><code>sudo cp /etc/vsftpd<span class="class">.conf</span> /etc/vsftpd<span class="class">.conf</span><span class="class">.orig</span>
sudo vim /etc/vsftpd.conf
</code></pre><p>vsftp的配置文件，它允许你设置所有类型的限制和策略，目前没有深入研究，修改如下</p>
<pre><code><span class="comment"># 不允许匿名访问</span>
<span class="setting">anonymous_enable=<span class="value"><span class="keyword">NO</span></span></span>
<span class="comment"># 设定可以进行写操作</span>
<span class="setting">write_enable=<span class="value"><span class="keyword">YES</span></span></span>
<span class="comment"># 设定本地用户可以访问</span>
<span class="setting">local_enable=<span class="value"><span class="keyword">YES</span></span></span>
</code></pre><p>重启vsftpd服务</p>
<pre><code><span class="title">sudo</span> service vsftpd restart
</code></pre><p>通过ftp连接树莓派系统，以用户名pi登录，密码是pi用户的密码。ftp的根目录是/home/pi，即pi用户的HOME目录，可上传或下载文件了。</p>
<h1 id="Web_File_Server">Web File Server</h1><p>通过http访问文件，采用python SimpleHTTPServer实现，性能上肯定比不上专业的web服务器软件，但是简单够用。</p>
<p>首先创建脚本httpFileServer.py,</p>
<pre><code>sudo <span class="keyword">vim</span> /home/pi/httpFileServer.<span class="keyword">py</span>
</code></pre><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line">import os</span><br><span class="line">import posixpath</span><br><span class="line">import urllib</span><br><span class="line">import BaseHTTPServer</span><br><span class="line"><span class="keyword">from</span> SimpleHTTPServer import SimpleHTTPRequestHandler</span><br><span class="line"></span><br><span class="line"><span class="comment"># modify this to add additional routes</span></span><br><span class="line">ROUTES = (</span><br><span class="line">    <span class="comment"># [url_prefix ,  directory_path]</span></span><br><span class="line">    ['/dlna', '/home/<span class="constant">pi</span>/nas-data/DLNA'],</span><br><span class="line">    ['', '/home/<span class="constant">pi</span>/usbhdd]  <span class="comment"># empty string for the 'default' match</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="type">class</span> RequestHandler(SimpleHTTPRequestHandler):</span><br><span class="line"></span><br><span class="line">    def translate_path(self, path):</span><br><span class="line">        <span class="string">""</span><span class="string">"translate path given routes"</span><span class="string">""</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># set default root to cwd</span></span><br><span class="line">        root = os.getcwd()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># look up routes and set root directory accordingly</span></span><br><span class="line">        <span class="keyword">for</span> pattern, rootdir <span class="keyword">in</span> ROUTES:</span><br><span class="line">            <span class="keyword">if</span> path.startswith(pattern):</span><br><span class="line">                <span class="comment"># found match!</span></span><br><span class="line">                path = path[len(pattern):]  <span class="comment"># consume path up to pattern len</span></span><br><span class="line">                root = rootdir</span><br><span class="line">                break</span><br><span class="line"></span><br><span class="line">        <span class="comment"># normalize path and prepend root directory</span></span><br><span class="line">        path = path.split('?',<span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">        path = path.split('<span class="comment">#',1)[0]</span></span><br><span class="line">        path = posixpath.normpath(urllib.unquote(path))</span><br><span class="line">        <span class="property">words</span> = path.split('/')</span><br><span class="line">        <span class="property">words</span> = filter(None, <span class="property">words</span>)</span><br><span class="line"></span><br><span class="line">        path = root</span><br><span class="line">        <span class="keyword">for</span> <span class="property">word</span> <span class="keyword">in</span> <span class="property">words</span>:</span><br><span class="line">            drive, <span class="property">word</span> = os.path.splitdrive(<span class="property">word</span>)</span><br><span class="line">            head, <span class="property">word</span> = os.path.split(<span class="property">word</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="property">word</span> <span class="keyword">in</span> (os.curdir, os.pardir):</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            path = os.path.join(path, <span class="property">word</span>)</span><br><span class="line"><span class="command"></span><br><span class="line">        return</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == '__main__':</span><br><span class="line">    BaseHTTPServer.test(RequestHandler, BaseHTTPServer.HTTPServer)</span><br></pre></td></tr></table></figure>
<p>创建服务，</p>
<pre><code>sudo vim <span class="regexp">/etc/i</span>nit.d<span class="regexp">/hfs</span>
</code></pre><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="shebang">#!/bin/sh</span></span><br><span class="line"><span class="comment"># /etc/init.d/hfs</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### BEGIN INIT INFO</span></span><br><span class="line"><span class="comment"># Provides: hfs</span></span><br><span class="line"><span class="comment"># Required-Start:    $network $local_fs $remote_fs</span></span><br><span class="line"><span class="comment"># Required-Stop:     $network $local_fs $remote_fs</span></span><br><span class="line"><span class="comment"># Default-Start:     2 3 4 5</span></span><br><span class="line"><span class="comment"># Default-Stop:      0 1 6</span></span><br><span class="line"><span class="comment"># Short-Description: Http file server init script.</span></span><br><span class="line"><span class="comment"># Description: Starts and stops http file services.</span></span><br><span class="line"><span class="comment">### END INIT INFO</span></span><br><span class="line"></span><br><span class="line">WWW_PORT=<span class="string">'80'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">    start)</span><br><span class="line">        nohup python /home/pi/httpFileServer.py <span class="variable">$WWW_PORT</span> &gt;&gt; /tmp/nohup.log <span class="number">2</span>&gt;&amp;<span class="number">1</span> &amp;</span><br><span class="line">        sleep <span class="number">2</span></span><br><span class="line">        <span class="built_in">stat</span>=`netstat -tlpn | grep <span class="variable">$WWW_PORT</span> | grep <span class="string">"python"</span> | cut <span class="operator">-d</span><span class="string">":"</span> <span class="operator">-f</span>2 | cut <span class="operator">-d</span><span class="string">" "</span> <span class="operator">-f</span>1`</span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$WWW_PORT</span> <span class="operator">-eq</span> <span class="variable">$stat</span> ]; <span class="keyword">then</span></span><br><span class="line">            sock=`netstat -tlpn | grep <span class="variable">$WWW_PORT</span> | grep <span class="string">"python"</span>`</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"Server is running:\n<span class="variable">$sock</span>"</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"Server is stopped"</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        ;;</span><br><span class="line"></span><br><span class="line">    stop)</span><br><span class="line">        pid=`ps ax | grep <span class="string">"/home/pi/httpFileServer.py <span class="variable">$WWW_PORT</span>"</span>| awk <span class="string">'&#123;print $1&#125;'</span>`</span><br><span class="line">        <span class="built_in">kill</span> -<span class="number">9</span> <span class="variable">$pid</span> <span class="number">2</span>&gt;/dev/null</span><br><span class="line">        rm <span class="operator">-f</span> /tmp/nohup.log</span><br><span class="line">        <span class="built_in">stat</span>=`netstat -tlpn | grep <span class="variable">$WWW_PORT</span> | grep <span class="string">"python"</span>| cut <span class="operator">-d</span><span class="string">":"</span> <span class="operator">-f</span>2 | cut <span class="operator">-d</span><span class="string">" "</span> <span class="operator">-f</span>1`</span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$WWW_PORT</span> <span class="operator">-eq</span> <span class="variable">$stat</span> ]; <span class="keyword">then</span></span><br><span class="line">            sock=`netstat -tlpn | grep <span class="variable">$WWW_PORT</span> | grep <span class="string">"python"</span>`</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"Server is  still running:\n<span class="variable">$sock</span>"</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"Server has stopped"</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        ;;</span><br><span class="line"></span><br><span class="line">    status)</span><br><span class="line">        <span class="built_in">stat</span>=`netstat -tlpn |grep <span class="variable">$WWW_PORT</span>| grep <span class="string">"python"</span> | cut <span class="operator">-d</span><span class="string">":"</span> <span class="operator">-f</span>2 | cut <span class="operator">-d</span><span class="string">" "</span> <span class="operator">-f</span>1`</span><br><span class="line">        <span class="keyword">if</span> [ <span class="variable">$WWW_PORT</span> <span class="operator">-eq</span> <span class="variable">$stat</span> ]; <span class="keyword">then</span></span><br><span class="line">            sock=`netstat -tlpn | grep <span class="variable">$WWW_PORT</span> | grep <span class="string">"python"</span>`</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"Server is running:\n<span class="variable">$sock</span>"</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">echo</span> <span class="string">"Server is stopped"</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">        ;;</span><br><span class="line">        *)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">"Use <span class="variable">$0</span> start|stop|status"</span></span><br><span class="line">        <span class="built_in">exit</span> <span class="number">1</span></span><br><span class="line">        ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="built_in">exit</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>添加可执行权限</p>
<pre><code>sudo chmod +x <span class="regexp">/etc/i</span>nit.d<span class="regexp">/hfs</span>
</code></pre><p>然后更新rc，添加自启动服务</p>
<pre><code>sudo <span class="operator"><span class="keyword">update</span>-rc.<span class="keyword">d</span> hfs <span class="keyword">defaults</span></span>
</code></pre><p>启动服务，</p>
<pre><code>sudo service hfs <span class="literal">start</span>
</code></pre><p>假设树莓派ip地址为192.168.1.118，访问<a href="http://192.168.1.118" target="_blank" rel="external"></a>就可以访问/home/pi/usbhdd，访问<a href="http://192.168.1.118/dlna" target="_blank" rel="external"></a>就可以访问/home/pi/nas-data/DLNA</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>为了方便访问树莓派的存储设备，有必要为其添加文件共享，下面为给出三种文件访问方法：samba, ftp, web file server</p>]]>
    
    </summary>
    
      <category term="DIY" scheme="http://mkitby.com/tags/DIY/"/>
    
      <category term="NAS" scheme="http://mkitby.com/tags/NAS/"/>
    
      <category term="Raspberry Pi" scheme="http://mkitby.com/tags/Raspberry-Pi/"/>
    
      <category term="samba" scheme="http://mkitby.com/tags/samba/"/>
    
      <category term="web file server" scheme="http://mkitby.com/tags/web-file-server/"/>
    
      <category term="树莓派" scheme="http://mkitby.com/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="Raspberry Pi" scheme="http://mkitby.com/categories/Raspberry-Pi/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Raspberry Pi从零开始搭建低成本NAS(5)-UPNP/DLNA多媒体]]></title>
    <link href="http://mkitby.com/2015/11/09/raspberry-pi-nas-upnp-dlna/"/>
    <id>http://mkitby.com/2015/11/09/raspberry-pi-nas-upnp-dlna/</id>
    <published>2015-11-09T12:46:36.000Z</published>
    <updated>2015-12-09T12:56:55.616Z</updated>
    <content type="html"><![CDATA[<p>说到RPi上的DNLA，就不得不说下MiniDLNA，网上资料教程最多的就是它了，我自己用的也是它。后面我会介绍用plex来搭建流媒体服务，它的功能更加强大，支持在线转码，缺点就是其专用客户端需要收费，树莓派跑起来比较占资源。其实有很多软件可以用来搭建流媒体服务，下面两个网站有关于这方面的详细信息，有兴趣可以参考，</p>
<a id="more"></a>
<p><a href="https://en.wikipedia.org/wiki/Comparison_of_UPnP_AV_media_servers/" target="_blank" rel="external">https://en.wikipedia.org/wiki/Comparison_of_UPnP_AV_media_servers/</a><br><a href="https://en.wikipedia.org/wiki/List_of_UPnP_AV_media_servers_and_clients/" target="_blank" rel="external">https://en.wikipedia.org/wiki/List_of_UPnP_AV_media_servers_and_clients/</a></p>
<h1 id="miniDLNA">miniDLNA</h1><h2 id="安装miniDLNA">安装miniDLNA</h2><p>如果采用<code>sudo apt-get install miniDLNA</code>，可能安装的不是最新版本，并且miniDLNA默认是不支持rmvb格式的视频，所以我们最好自己下载源代码，只需要做很少改动就可以支持rmvb，然后编译安装。<br>如果已经安装Raspbian仓库的miniDLNA，需要先移除</p>
<pre><code>sudo apt-<span class="built_in">get</span> purge minidlna -<span class="keyword">y</span>
sudo apt-<span class="built_in">get</span> <span class="built_in">remove</span> minidlna
sudo apt-<span class="built_in">get</span> autoremove -<span class="keyword">y</span>
</code></pre><p>然后安装miniDLNA所依赖的包</p>
<pre><code><span class="label">sudo</span> apt-<span class="preprocessor">get</span> <span class="keyword">build-dep </span>minidlna -y
</code></pre><p>如果提示出错，可以手动安装</p>
<pre><code>sudo apt-<span class="built_in">get</span> install libjpeg-<span class="built_in">dev</span> libsqlite3-<span class="built_in">dev</span> libexif-<span class="built_in">dev</span> libid3tag0-<span class="built_in">dev</span> libvorbis-<span class="built_in">dev</span> libflac-<span class="built_in">dev</span> libavformat-<span class="built_in">dev</span> libavcodec-<span class="built_in">dev</span> –y
</code></pre><p>安装编译相关工具</p>
<pre><code>sudo apt-get <span class="operator"><span class="keyword">install</span> autoconf automake autopoint <span class="keyword">build</span>-essential</span>
</code></pre><p>下载miniDLNA源代码,目前最新的是1.1.5版</p>
<pre><code>wget http:<span class="comment">//sourceforge.net/projects/minidlna/files/minidlna/1.1.5/minidlna-1.1.5.tar.gz</span>
tar -xvf minidlna-<span class="number">1.1</span><span class="number">.5</span>.tar.gz
cd minidlna-<span class="number">1.1</span><span class="number">.5</span>
</code></pre><p>修改源代码支持rmvb/rm</p>
<pre><code><span class="preprocessor">## metadata.c</span>
<span class="comment">//line 840</span>
<span class="keyword">else</span> <span class="keyword">if</span>( <span class="built_in">strncmp</span>(ctx-&gt;iformatctx-&gt;name, <span class="string">"matroska"</span>, <span class="number">8</span>) == <span class="number">0</span> )
    xasprintf(&amp;m.mime, <span class="string">"video/x-matroska"</span>);
<span class="keyword">else</span> <span class="keyword">if</span>( <span class="built_in">strcmp</span>(ctx-&gt;iformatctx-&gt;name, <span class="string">"flv"</span>) == <span class="number">0</span> )
    xasprintf(&amp;m.mime, <span class="string">"video/x-flv"</span>);
<span class="comment">//----add----</span>
<span class="keyword">else</span> <span class="keyword">if</span>( <span class="built_in">strcmp</span>(ctx-&gt;iformat-&gt;name, <span class="string">"rm"</span>) == <span class="number">0</span> )
    xasprintf(&amp;m.mime, <span class="string">"video/x-pn-realvideo"</span>);
<span class="keyword">else</span> <span class="keyword">if</span>( <span class="built_in">strcmp</span>(ctx-&gt;iformat-&gt;name, <span class="string">"rmvb"</span>) == <span class="number">0</span> )
    xasprintf(&amp;m.mime, <span class="string">"video/x-pn-realvideo"</span>);
<span class="comment">//---end----</span>
<span class="keyword">if</span>( m.mime )
    <span class="keyword">goto</span> video_nodlna;

<span class="preprocessor">## upnpglobalvars.h</span>
<span class="comment">// Line 169</span>
    <span class="string">"http-get:*:audio/mp4:*,"</span> \
    <span class="string">"http-get:*:audio/x-wav:*,"</span> \
    <span class="string">"http-get:*:audio/x-flac:*,"</span> \
    <span class="string">"http-get:*:application/ogg:*,"</span> \
    <span class="string">"http-get:*:video/x-pn-realvideo:*"</span> <span class="comment">// Add this</span>

<span class="preprocessor">#<span class="keyword">define</span> DLNA_FLAG_DLNA_V1_5      <span class="number">0x00100000</span></span>
<span class="preprocessor">#<span class="keyword">define</span> DLNA_FLAG_HTTP_STALLING  <span class="number">0x00200000</span></span>


<span class="preprocessor">## utils.c</span>
<span class="comment">//line 381</span>
        ends_with(file, <span class="string">".m2t"</span>) || ends_with(file, <span class="string">".mkv"</span>)   ||
        ends_with(file, <span class="string">".vob"</span>) || ends_with(file, <span class="string">".ts"</span>)    ||
        ends_with(file, <span class="string">".flv"</span>) || ends_with(file, <span class="string">".xvid"</span>)  ||
<span class="comment">//----add----</span>
        ends_with(file, <span class="string">".rm"</span>)  || ends_with(file, <span class="string">".rmvb"</span>)  ||
<span class="comment">//----end----</span>
<span class="preprocessor">#<span class="keyword">ifdef</span> TIVO_SUPPORT</span>
        ends_with(file, <span class="string">".TiVo"</span>) ||
<span class="preprocessor">#<span class="keyword">endif</span></span>
        ends_with(file, <span class="string">".mov"</span>) || ends_with(file, <span class="string">".3gp"</span>));
</code></pre><p>配置，编译和安装miniDLNA，大概需要5分钟完成</p>
<pre><code>./configure &amp;&amp; <span class="built_in">make</span> &amp;&amp; sudo <span class="built_in">make</span> install
</code></pre><p>复制默认配置文件</p>
<pre><code>sudo cp minidlna<span class="class">.conf</span> /etc/
</code></pre><p>复制启动脚本，来自动启动miniDLNA.</p>
<pre><code>sudo cp linux/minidlna<span class="class">.init</span><span class="class">.d</span><span class="class">.script</span> /etc/init.d/minidlna
</code></pre><p>为启动脚本添加执行权限</p>
<pre><code>sudo chmod +x <span class="regexp">/etc/i</span>nit.d<span class="regexp">/minidlna</span>
</code></pre><p>然后更新rc，添加自启动服务</p>
<pre><code>sudo <span class="operator"><span class="keyword">update</span>-rc.<span class="keyword">d</span> minidlna <span class="keyword">defaults</span></span>
</code></pre><p>先备份然后编辑配置文件</p>
<pre><code>sudo cp /etc/minidlna<span class="class">.conf</span> /etc/minidlna<span class="class">.conf</span><span class="class">.orig</span>
sudo vim /etc/minidlna.conf
</code></pre><p>修改如下设置</p>
<pre><code>media_dir=<span class="regexp">/home/pi</span><span class="regexp">/nas-data/</span><span class="constant">DLNA</span>
media_dir=<span class="regexp">/home/pi</span><span class="regexp">/usbhdd/usbhdd</span>1
media_dir=<span class="regexp">/home/pi</span><span class="regexp">/usbhdd/usbhdd</span>2

db_dir=<span class="regexp">/home/pi</span><span class="regexp">/nas-data/</span><span class="constant">DLNA</span>/db
log_dir=<span class="regexp">/home/pi</span><span class="regexp">/nas-data/</span><span class="constant">DLNA</span>/log

friendly_name=<span class="constant">RasPi</span> <span class="constant">DLNA</span> <span class="constant">Server</span>
</code></pre><p>创建文件夹</p>
<pre><code><span class="title">mkdir</span> /home/pi/nas-<span class="typedef"><span class="keyword">data</span>/<span class="type">DLNA</span></span>
<span class="title">mkdir</span> /home/pi/nas-<span class="typedef"><span class="keyword">data</span>/<span class="type">DLNA</span>/<span class="container">{<span class="type">Music</span>,<span class="type">Pictures</span>,<span class="type">Videos</span>,<span class="title">db</span>,<span class="title">log</span>}</span></span>
</code></pre><p>最后重启miniDLNA服务</p>
<pre><code><span class="title">sudo</span> service minidlna restart
</code></pre><p>打开计算机网络，可以看到RasPi DLNA Server媒体设备，如图Figure 1所示。同时如果是使用Windows 10（win7没有，win8没测试过），在我的电脑-&gt;网络位置还会显示RasPi DLNA Server，如图Figure 2所示,这一点配合WMP比较有用，正好弥补了WMP的不足，后面会有详细介绍。</p>
<div align="center"><br><img src="http://7xnzab.com1.z0.glb.clouddn.com/uploads/raspberry-pi/raspberry-pi-nas-upnp-dlna/figure1.jpg_mkitby" alt=""><br>Figure 1. 树莓派DLNA<br></div>

<div align="center"><br><img src="http://7xnzab.com1.z0.glb.clouddn.com/uploads/raspberry-pi/raspberry-pi-nas-upnp-dlna/figure2.jpg_mkitby" alt=""><br>Figure 2. 网络位置DLNA Server<br></div>

<h2 id="MP3中文名称乱码">MP3中文名称乱码</h2><p>用Windows Media Player(后面用WMP替代)查看minidlna多媒体服务器文件，有些中文文件名显示乱码，有些就正常。目前Linux中流行的很多播放器经常不能正确显示如歌曲名、专辑名等MP3 tag信息，经过有些工具转换后，标签又不能被Windows识别。MP3的歌曲名、艺术家、专辑名等信息都以一定的编码格式存储在MP3标签中。简单地说，乱码出现的原因就是播放器未能准确识别出MP3标签的中文编码格式。</p>
<p>具体的说，现在MP3文件的标签主要有几种标准：ID3v1、ID3v2（现在常见的又分为2.3和2.4）、APEv2。可以从两个角度解决这个问题。一是转换已有MP3文件的标签编码，二是使用支持GBK编码的播放软件,这种方案我没试过。</p>
<p>mp3tagiconv是一款可用于解决MP3乱码问题的软件。它可以自动探测MP3标签的编码，并以合理的方式重新写入，经过其处理的编码可被Linux、Windows（包括Windows Media Player）和各种移动设备正确识别。<br>mp3tagiconv 需要 mutagen 的支持，确保之前已经安装。</p>
<pre><code><span class="comment"># The script depends on mutagen to run. Please install it from the repository of your distribution (in Ubuntu: python-mutagen).</span>
sudo apt-get install python-mutagen
git <span class="keyword">clone</span> <span class="title">https</span>://github.com/cxcxcxcx/mp3tagiconv.git
</code></pre><blockquote>
<p>Usage：<br>For mp3 files with Chinese tags(we first try gbk, then utf8), ID3v2 tags which are already encoded in unicode will not be affected:<br>mp3tagiconv a.mp3<br>You can use -e to specify the encoding used if the tag is stored by latin-1. The program will guess your encoding according to your list:<br>mp3tagiconv -e gbk,utf8 b.mp3<br>If you don’t want to confirm for every file(not recommended):<br>mp3tagiconv –do-update *.mp3</p>
</blockquote>
<h1 id="Plex_Media_Server">Plex Media Server</h1><p>下载plex media server deb安装包</p>
<pre><code>sudo wget <span class="string">https:</span><span class="comment">//dev2day.de/plex-latest</span>
</code></pre><p>等待下载完成。</p>
<p>安装deb包</p>
<pre><code>sudo dpkg -<span class="tag">i</span> plex*
</code></pre><p>安装转码(transcoding)所需要的软件</p>
<pre><code>sudo apt-<span class="keyword">get</span> install mkvtoolnix libexpat1 ffmpeg -y
</code></pre><p>等待安装完成。</p>
<p>重启plex media server服务</p>
<pre><code><span class="title">sudo</span> service plexmediaserver restart
</code></pre><p>访问Plex Media Server WebGUI, 用浏览器访问<a href="http://192.168.1.118:32400/web" target="_blank" rel="external">http://192.168.1.118:32400/web</a>， 192.168.1.118为RPi的IP地址<br>大概会弹出一个对话框，在页面右上角（如图Figure 3）点agree，之后进入主页，</p>
<div align="center"><br><img src="http://7xnzab.com1.z0.glb.clouddn.com/uploads/raspberry-pi/raspberry-pi-nas-upnp-dlna/figure3.jpg_mkitby" alt=""><br>Figure 3. 主页右上角部分<br></div><br>然后点击页面右上角的扳手图标进入设置页面，如图Figure 4，点击右上角Web，然后在最左边选择General，先设置语言为中文，点最下面的SAVE CHANGES按钮，然后刷新，界面会马上切换为中文。<br><div align="center"><br><img src="http://7xnzab.com1.z0.glb.clouddn.com/uploads/raspberry-pi/raspberry-pi-nas-upnp-dlna/figure4.jpg_mkitby" alt=""><br>Figure 4. 设置页面<br></div><br>这里面有很多设置选项，我也不一一讲，下面只列出我认为比较重要的设置，<br>1.    播放器设置，如图Figure 5，在这里面可以设置流媒体质量、分辨率、音量和字幕等，可以根据实际需要做修改，另外右上角可以打开高级选项，我暂时没有做任何改动，全部默认。<br><div align="center"><br><img src="http://7xnzab.com1.z0.glb.clouddn.com/uploads/raspberry-pi/raspberry-pi-nas-upnp-dlna/figure5.jpg_mkitby" alt=""><br>Figure 5. 播放器设置界面<br></div><br>2.    服务器—&gt;资料库，勾选“自动更新我的资料库”和“定期更新我的媒体库”，如图Figure 6所示。<br><div align="center"><br><img src="http://7xnzab.com1.z0.glb.clouddn.com/uploads/raspberry-pi/raspberry-pi-nas-upnp-dlna/figure6.jpg_mkitby" alt=""><br>Figure 6. 资料库设置<br></div><br>3. 最后讲如何添加多媒体资料，在主页左上角点击+号，或弹出如图Figure 7所示界面，然后就可以尽情添加你想要的资料了。<br><div align="center"><br><img src="http://7xnzab.com1.z0.glb.clouddn.com/uploads/raspberry-pi/raspberry-pi-nas-upnp-dlna/figure7.jpg_mkitby" alt=""><br>Figure 7. 添加资料库<br></div>

<h1 id="DLNA_client选择">DLNA client选择</h1><p>下面主要列出Windows，Android，IOS平台，我测试过的，其他平台linux，mac留给你们测了。</p>
<h2 id="跨平台Kodi(XMBC)">跨平台Kodi(XMBC)</h2><p>Kodi就是大名鼎鼎的XBMC，一款功能强大的重量级播放器，支持Windows, Linux, Mac OS, IOS, Android全平台。但是我认为这家伙最适合在大屏幕的播放设备，支持遥控器，作为家庭影院终端播放器比较多。手机，电脑我个人感觉操作不是很方便，必须要全屏。</p>
<h2 id="Windows平台">Windows平台</h2><p>Windows平台推荐用VLC或者WMP，VLC可以比较好地支持miniDLNA，有个问题就是默认设置播放视频时，中文名字的视频在VLC中显示小方块也就是乱码，字幕也是，需要需改设置，打开VLC后点击“工具”-&gt;“首选项”-&gt;“字幕和OSD”-&gt;“字体”右侧下拉菜单选择“MingLiU”保存后重启播放器即可。测试发现Windows 7系统下还可以选择以下字体：PMingLiU, DFKai-SB, Microsoft JhengHei, MingLiU_HKSCS。Windows XP系统下还可以选择以下字体：PMingLiU, 宋体, 黑体, 新宋体。</p>
<p>WMP也可以支持miniDLNA，但是不能显示文件夹，所有内容都只能显示在一起，这点比较可惜，另外WMP支持格式有限，需要安装外部解码包，推荐K-Lite Codec Pack。在windows 10上，在网络位置会显示DLNA服务器，打开之后，选择需要播放的文件，右键-&gt;打开方式-&gt;Windows Media Player，然后就可以直接播放了，如果选择其他播放器打开会显示下载进度条，目前发现只有WMP支持直接播放。如果谁发现其他播放器，请告诉我。</p>
<h2 id="Android平台">Android平台</h2><p>Android平台有很多选择， BubbleUPNP, MediaHouse等。BubbleUPNP功能强大，支持作为DLNA server，mediahouse功能专一，专门用作client，但是他们都需要外挂播放器。外挂播放器推荐VLC for android或者MX Player，其中MX Player有些视频会出现声音画面不同步的现象，这点很可惜，不知道后面版本会不会解决，但VLC目前测试下来还没有发现这个问题。所以在Android上面，我主要使用VLC作为外挂播放器。</p>
<h2 id="IOS平台">IOS平台</h2><p>IOS平台不像Android平台那样，有那么多免费的软件可以选择，目前免费的好像就是 Moli Player，收费的有AV Player, GoodPlayer, AcePlayer等。</p>
<h1 id="参考">参考</h1><p><a href="http://skypegnu1.blog.51cto.com/8991766/1654186" target="_blank" rel="external">http://skypegnu1.blog.51cto.com/8991766/1654186</a><br><a href="http://www.htpcguides.com/install-readymedia-minidlna-1-1-4-raspberry-pi/" target="_blank" rel="external">http://www.htpcguides.com/install-readymedia-minidlna-1-1-4-raspberry-pi/</a><br><a href="http://linux-wiki.cn/wiki/Mp3标签乱码问题分析与解决方案" target="_blank" rel="external">http://linux-wiki.cn/wiki/Mp3标签乱码问题分析与解决方案</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>说到RPi上的DNLA，就不得不说下MiniDLNA，网上资料教程最多的就是它了，我自己用的也是它。后面我会介绍用plex来搭建流媒体服务，它的功能更加强大，支持在线转码，缺点就是其专用客户端需要收费，树莓派跑起来比较占资源。其实有很多软件可以用来搭建流媒体服务，下面两个网站有关于这方面的详细信息，有兴趣可以参考，</p>]]>
    
    </summary>
    
      <category term="DIY" scheme="http://mkitby.com/tags/DIY/"/>
    
      <category term="NAS" scheme="http://mkitby.com/tags/NAS/"/>
    
      <category term="Raspberry Pi" scheme="http://mkitby.com/tags/Raspberry-Pi/"/>
    
      <category term="树莓派" scheme="http://mkitby.com/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="Raspberry Pi" scheme="http://mkitby.com/categories/Raspberry-Pi/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Raspberry Pi从零开始搭建低成本NAS(4)-存储设备]]></title>
    <link href="http://mkitby.com/2015/11/05/raspberry-pi-nas-storage-device/"/>
    <id>http://mkitby.com/2015/11/05/raspberry-pi-nas-storage-device/</id>
    <published>2015-11-05T14:06:01.000Z</published>
    <updated>2015-12-13T09:47:49.851Z</updated>
    <content type="html"><![CDATA[<p>准备一块硬盘，以及一个移动硬盘盒（支持2.5/3.5寸的硬盘，以及外接供电）把硬盘分区，并格式化为ext4 格式，这样性能更好，寿命应该更长(待考证)。</p>
<p>由于RPi的USB口供电能力有限，所以移动硬盘需要外部供电Table 1是官方给出的数据(<a href="https://www.raspberrypi.org/help/faqs/#power" target="_blank" rel="external">https://www.raspberrypi.org/help/faqs/#power</a>) ， 可以看到Raspberry Pi 2 Model B USB最大供电电流为600mA/1.2A(可切换)，注意这是4个USB口总共加一起的最大电流。如果我们把电流改成1.2A，那么理论上带一个移动硬盘应该没有问题。但是请注意：进入网页在表格的下面有一段，我摘抄出来。</p>
<a id="more"></a>
<blockquote>
<p>The Raspberry Pi model B+ and 2B can supply 600mA/1.2A to downstream USB peripherals, switchable by a firmware setting. This allows the vast majority of USB devices to be connected directly to these models, assuming the upstream power supply has sufficient available current. <strong>Very high-current devices or devices can draw a surge current such as certain 3G modems and USB hard disks will still require an external powered USB hub.</strong></p>
</blockquote>
<div align="center"><br>Table 1. 各种版本的供电参数<br><img src="http://7xnzab.com1.z0.glb.clouddn.com/uploads/raspberry-pi/raspberry-pi-nas-storage-device/table1.jpg_mkitby" alt=""><br></div>

<p>注意粗体句子，意思是说虽然电流够了，但是像3G模块和USB移动硬盘需要较高电流或者会产生浪涌电流的设备仍然需要外部带供电的USB集线器。所以为了设备安全最好按照官方的建议做。</p>
<p>实在是嫌麻烦或者不怕死的，比如像我这样的，嘿嘿，可以裸接2.5寸移动硬盘，但为了保险起见，就不要再接什么其它USB设备了，比如无线网卡（类似于3G模块）、鼠标、键盘等。</p>
<p>所以根据上面的分析对于想外接移动硬盘的人来说，有以下两种解决方案：</p>
<ol>
<li>直接用RPi给2.5寸移动硬盘供电<br>郑重声明：请考虑清楚是否一定要采用这种方式，自己评估风险（出现任何烧机，损坏，移动硬盘挂掉等任何硬件故障），出现一切问题自己负责，别哭着找我啊，我可不赔。</li>
<li>用带电源的USB集线器，USB集线器接上电源，然后连接上RPi的USB口，移动电源接到USB集线器上。USB集线器一定要选择质量信得过的牌子，供电能力足够的，带过流保护功能，如此一来就可以连接多个移动硬盘，比如接两个移动硬盘，其中一个用来做数据备份。</li>
</ol>
<p>由于我暂时没有USB集线器，所以下面我以第一种方案为例进行测试，我这边有一个2.5寸1T移动硬盘和1个64G U盘。先把U盘格式化为ext4格式，移动硬盘之前有两个分区，一个FAT32，一个exFAT，由于我移动硬盘有其他用途，我就不格式化为ext4。但建议大家可以弄个专用的移动硬盘，然后格式化为ext4格式，这样好折腾，你想想，每天不关机，还要远程下载等等，U盘什么的经不起这么玩。</p>
<p>首先编辑/boot/config.txt，先备份，</p>
<pre><code>sudo cp /boot/config<span class="class">.txt</span> /boot/config<span class="class">.txt</span><span class="class">.orig</span>
sudo vim /boot/config.txt
</code></pre><p>在文件末尾加上这行max_usb_current=1，把最大电流切换到1.2 A，关机，断电，插上USB移动硬盘和U盘，上电启动。然后登录SSH，查看磁盘信息， <code>sudo fdisk –l</code>，如果没有问题的话，会显示，</p>
<pre><code>… …
Disk /dev/sda: 62.9 GB, 62914560000 bytes
… …

   Device Boot      <span class="operator"><span class="keyword">Start</span>         <span class="keyword">End</span>      Blocks   <span class="keyword">Id</span>  <span class="keyword">System</span>
/dev/sda1            <span class="number">2048</span>   <span class="number">122879999</span>    <span class="number">61438976</span>   <span class="number">83</span>  Linux

Disk /dev/sdb: <span class="number">1000.2</span> GB, <span class="number">1000204886016</span> <span class="keyword">bytes</span>
… …

   Device Boot      <span class="keyword">Start</span>         <span class="keyword">End</span>      Blocks   <span class="keyword">Id</span>  <span class="keyword">System</span>
/dev/sdb1              <span class="number">63</span>   <span class="number">976760030</span>   <span class="number">488379984</span>    <span class="keyword">c</span>  W95 FAT32 (LBA)
<span class="keyword">Partition</span> <span class="number">1</span> does <span class="keyword">not</span> <span class="keyword">start</span> <span class="keyword">on</span> <span class="keyword">physical</span> sector boundary.
/dev/sdb2       <span class="number">976760160</span>  <span class="number">1953520063</span>   <span class="number">488379952</span>    <span class="number">7</span>  HPFS/NTFS/exFAT</span>
</code></pre><p>可以看到，/dev/sda为64G U盘，只有一个分区/dev/sda1，/dev/sdb为1T移动硬盘，有两个分区/dev/sdb1(FAT32)和/dev/sdb2(exFAT)。如果看不到移动硬盘，进行以下操作：</p>
<p>先安装git</p>
<pre><code>sudo apt-<span class="keyword">get</span> install git-core –y
</code></pre><p>克隆Wiring Pi</p>
<pre><code>sudo git <span class="keyword">clone</span> <span class="title">git</span>://git.drogon.net/wiringPi
</code></pre><p>进入Wiring Pi文件夹，开始编译</p>
<pre><code><span class="built_in">cd</span> wiringPi &amp;&amp; sudo ./build
</code></pre><p>检查GPIO 38 Pin 电平</p>
<pre><code>gpio –<span class="keyword">g</span> <span class="keyword">read</span> 38
</code></pre><p>应该返回1，表示高电平，如果返回0表示低电平，我们需要让pin脚输出高电平</p>
<pre><code>gpio -g write <span class="number">38</span> <span class="number">1</span>
</code></pre><p>然后再检测一遍，如果还有问题，那我也没办法， 老老实实接USB集线器。</p>
<p>成功识别到硬盘后，可以查询文件系统类型、LABEL、UUID等信息</p>
<pre><code><span class="title">sudo</span> blkid
</code></pre><p>会显示，</p>
<pre><code><span class="regexp">/dev/</span><span class="string">mmcblk0p1:</span> SEC_TYPE=<span class="string">"msdos"</span> LABEL=<span class="string">"boot"</span> UUID=<span class="string">"15CD-3B79"</span> TYPE=<span class="string">"vfat"</span>
<span class="regexp">/dev/</span><span class="string">mmcblk0p2:</span> UUID=<span class="string">"13d368bf-6dbf-4751-8ba1-88bed06bef77"</span> TYPE=<span class="string">"ext4"</span>
<span class="regexp">/dev/</span><span class="string">sda1:</span> UUID=<span class="string">"7e623443-f19a-4564-8e60-e9d2170ac32a"</span> TYPE=<span class="string">"ext4"</span>
<span class="regexp">/dev/</span><span class="string">sdb1:</span> LABEL=<span class="string">"COLORSPACE"</span> UUID=<span class="string">"F8E6-4FDB"</span> TYPE=<span class="string">"vfat"</span>
<span class="regexp">/dev/</span><span class="string">sdb2:</span> UUID=<span class="string">"3007-F316"</span> TYPE=<span class="string">"exfat"</span>
</code></pre><p>Raspbian默认不支持exFAT，需要安装exfat-fuse</p>
<pre><code>sudo apt-<span class="keyword">get</span> install exfat-fuse -y
</code></pre><p>再就是设置自动挂载，需要编辑/etc/fstab，先备份，</p>
<pre><code>sudo cp <span class="regexp">/etc/</span>fstab <span class="regexp">/etc/</span>fstab.orig
sudo vim <span class="regexp">/etc/</span>fstab
</code></pre><p>在文件最后加上下面几行内容，</p>
<pre><code>UUID=F8E6-<span class="number">4F</span>DB /home/pi/usbhdd/usbhdd1  vfat   defaults,noatime,umask=<span class="number">0000</span>,utf8=<span class="number">1</span>  <span class="number">0</span>   <span class="number">0</span>
UUID=<span class="number">3007</span>-F316 /home/pi/usbhdd/usbhdd2  exfat  defaults,noatime,umask=<span class="number">0000</span>         <span class="number">0</span>   <span class="number">0</span>
/dev/sda1      /home/pi/nas-data        ext4   defaults,noatime                    <span class="number">0</span>   <span class="number">0</span>
</code></pre><p>如果出现中文乱码，需要加参数utf8=1，保存，最后重启。关于/etc/fstab，可以参考<a href="https://wiki.archlinux.org/index.php/Fstab" target="_blank" rel="external">https://wiki.archlinux.org/index.php/Fstab</a></p>
<p>创建挂载目录</p>
<pre><code>mkdir <span class="regexp">/home/</span>pi/usbhdd
mkdir <span class="regexp">/home/</span>pi<span class="regexp">/usbhdd/</span>usbhdd1
mkdir <span class="regexp">/home/</span>pi<span class="regexp">/usbhdd/</span>usbhdd2
mkdir <span class="regexp">/home/</span>pi/nas-data
</code></pre><p>重启</p>
<pre><code><span class="title">sudo</span> reboot
</code></pre><p>重新登录SSH，查看挂载信息</p>
<pre><code>sudo mount <span class="operator">-l</span>
</code></pre><p>会显示，</p>
<pre><code>… …
/dev/sdb1 on /home/pi/usbhdd/usbhdd1 <span class="typedef"><span class="keyword">type</span> vfat <span class="container">(… …)</span></span>
/dev/sdb2 on /home/pi/usbhdd/usbhdd2 <span class="typedef"><span class="keyword">type</span> fuseblk <span class="container">(… …)</span></span>
/dev/sda1 on /home/pi/nas-<span class="typedef"><span class="keyword">data</span> <span class="keyword">type</span> ext4 <span class="container">(… …)</span></span>
</code></pre><p>或者输入命令</p>
<pre><code><span class="title">sudo</span> df -h
</code></pre><p>会显示，</p>
<pre><code>Filesystem      Size  Used Avail Use% Mounted on
rootfs           <span class="number">15</span>G  <span class="number">3.0</span>G   <span class="number">11</span>G  <span class="number">22</span>% /
/dev/root        <span class="number">15</span>G  <span class="number">3.0</span>G   <span class="number">11</span>G  <span class="number">22</span>% /
devtmpfs        <span class="number">460</span>M     <span class="number">0</span>  <span class="number">460</span>M   <span class="number">0</span>% /dev
tmpfs            <span class="number">93</span>M  <span class="number">388</span>K   <span class="number">93</span>M   <span class="number">1</span>% /run
tmpfs           <span class="number">5.0</span>M     <span class="number">0</span>  <span class="number">5.0</span>M   <span class="number">0</span>% /run/lock
tmpfs           <span class="number">186</span>M  <span class="number">4.0</span>K  <span class="number">186</span>M   <span class="number">1</span>% /run/shm
/dev/mmcblk0p1   <span class="number">56</span>M   <span class="number">19</span>M   <span class="number">37</span>M  <span class="number">34</span>% /boot
/dev/sdb1       <span class="number">466</span>G  <span class="number">447</span>G   <span class="number">19</span>G  <span class="number">96</span>% /home/pi/usbhdd/usbhdd1
/dev/sdb2       <span class="number">466</span>G  <span class="number">457</span>G  <span class="number">9.1</span>G  <span class="number">99</span>% /home/pi/usnhdd/usbhdd2
</code></pre><p>表明全部挂载成功。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>准备一块硬盘，以及一个移动硬盘盒（支持2.5/3.5寸的硬盘，以及外接供电）把硬盘分区，并格式化为ext4 格式，这样性能更好，寿命应该更长(待考证)。</p>
<p>由于RPi的USB口供电能力有限，所以移动硬盘需要外部供电Table 1是官方给出的数据(<a href="https://www.raspberrypi.org/help/faqs/#power">https://www.raspberrypi.org/help/faqs/#power</a>) ， 可以看到Raspberry Pi 2 Model B USB最大供电电流为600mA/1.2A(可切换)，注意这是4个USB口总共加一起的最大电流。如果我们把电流改成1.2A，那么理论上带一个移动硬盘应该没有问题。但是请注意：进入网页在表格的下面有一段，我摘抄出来。</p>]]>
    
    </summary>
    
      <category term="DIY" scheme="http://mkitby.com/tags/DIY/"/>
    
      <category term="NAS" scheme="http://mkitby.com/tags/NAS/"/>
    
      <category term="Raspberry Pi" scheme="http://mkitby.com/tags/Raspberry-Pi/"/>
    
      <category term="树莓派" scheme="http://mkitby.com/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="Raspberry Pi" scheme="http://mkitby.com/categories/Raspberry-Pi/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Raspberry Pi从零开始搭建低成本NAS(3)-系统安装]]></title>
    <link href="http://mkitby.com/2015/11/05/raspberry-pi-nas-os-install/"/>
    <id>http://mkitby.com/2015/11/05/raspberry-pi-nas-os-install/</id>
    <published>2015-11-05T14:05:49.000Z</published>
    <updated>2015-12-09T12:56:50.513Z</updated>
    <content type="html"><![CDATA[<h1 id="安装操作系统">安装操作系统</h1><p>在<a href="https://www.raspberrypi.org/downloads/" target="_blank" rel="external">https://www.raspberrypi.org/downloads/</a> 下载Raspbian操作系统，下载完成后解压缩得到镜像文件(.img)，然后我们需要一个工具把镜像文件烧录到SD卡上， 我知道有两款工具，Win32DiskImager，USB Image Tool，另外这两款工具还可以备份整个SD卡为一个镜像文件。下面以Win32DiskImager为例说明如何烧录，如图Figure 1所示。</p>
<ul>
<li>把micro SD card插入读卡器中，连接上电脑. 等电脑识别后会分配一个盘符(例如G:)</li>
<li>从<a href="http://sourceforge.net/projects/win32diskimager/" target="_blank" rel="external">http://sourceforge.net/projects/win32diskimager/</a> 下载 Win32DiskImager， 然后安装</li>
<li>安装完成后以系统管理员权限运行</li>
<li>选择之前解压缩得到的镜像文件，选择SD卡所在盘符</li>
<li>点击Write按钮开始写入镜像文件，然后就是等待，完成后会弹出提示框</li>
</ul>
<a id="more"></a>
<div align="center"><br><img src="http://7xnzab.com1.z0.glb.clouddn.com/uploads/raspberry-pi/raspberry-pi-nas-os-install/figure1.jpg_mkitby" alt=""><br>Figure 1. Win32DiskImager烧录<br></div>

<p>如何英文还可以，也可以直接参考官方文档：<br><a href="https://www.raspberrypi.org/documentation/installation/installing-images/windows.md" target="_blank" rel="external">https://www.raspberrypi.org/documentation/installation/installing-images/windows.md</a></p>
<h1 id="登录SSH">登录SSH</h1><p>把micro SD card 插入Raspberry Pi，插上网线，连到路由器，然后上电。由于我们没有键盘和显示器，所以需要用SSH登录RPi(Raspberry Pi缩写)，默认登陆用户名/密码：pi / raspberry。 但是不知道IP地址怎么办？其实我们可以从路由器设置里面得到IP地址。下面以TP-LINK为例，其他路由器类似。 进入路由器设置—&gt;DHCP服务器—&gt;客户端列表，就可以得到RPi的IP地址，如图Figure 2所示。然后最好绑定RPi的IP和MAC，进入路由器设置—&gt;DHCP服务器—&gt;静态地址保留，然后在设置里面，添加树莓派IP地址192.168.1.118和MAC地址。以后树莓派每次启动，IP地址都会固定为192.168.1.118。当然也可以设置RPi为静态IP地址，这个我们后面再讲。</p>
<div align="center"><br><img src="http://7xnzab.com1.z0.glb.clouddn.com/uploads/raspberry-pi/raspberry-pi-nas-os-install/figure2.jpg_mkitby" alt=""><br>Figure 2. 路由器设置界面<br></div>

<p>接下来用SSH客户端(Puty, SecureCRT, XShell等) 登录RPi，我这里以XShell(官网<a href="https://www.netsarang.com/" target="_blank" rel="external">https://www.netsarang.com/</a> )为例,</p>
<ul>
<li>先去官网下载安装</li>
<li>运行XShell，会弹出会话对话框，如图Figure 3所示， 点击“新建”按钮，会弹出如图Figure 4所示对话框，“名称”输入Raspberry Pi(或者其它任何你想要的名字)，“主机”输入之前获得的IP地址，其它默认，点击确定，然后会回到如图Figure 3。</li>
</ul>
<div align="center"><br><img src="http://7xnzab.com1.z0.glb.clouddn.com/uploads/raspberry-pi/raspberry-pi-nas-os-install/figure3.jpg_mkitby" alt=""><br>Figure 3. XShell运行开始界面<br></div>

<div align="center"><br><img src="http://7xnzab.com1.z0.glb.clouddn.com/uploads/raspberry-pi/raspberry-pi-nas-os-install/figure4.jpg_mkitby" alt=""><br>Figure 4. 新建会话属性对话框<br></div>

<ul>
<li>点击“连接”按钮，出现如图Figure 5所示界面， 输入pi，勾选“记住用户名”复选框，点击“确定”按钮，弹出如图Figure 6所示对话框，输入密码raspberry，勾选“记住密码”复选框，点击“确定”按钮。</li>
</ul>
<div align="center"><br><img src="http://7xnzab.com1.z0.glb.clouddn.com/uploads/raspberry-pi/raspberry-pi-nas-os-install/figure5.jpg_mkitby" alt=""><br>Figure 5. SSH用户名<br></div>

<div align="center"><br><img src="http://7xnzab.com1.z0.glb.clouddn.com/uploads/raspberry-pi/raspberry-pi-nas-os-install/figure6.jpg_mkitby" alt=""><br>Figure 6. SSH用户身份验证<br></div>

<ul>
<li>以上所有步骤都没有问题的话，恭喜你，成功登录SSH。以后所有的操作基本上全是通过SSH来完成。</li>
</ul>
<h1 id="系统配置">系统配置</h1><h2 id="raspi-config配置">raspi-config配置</h2><p>接下来就是进行系统的一些基本配置，输入，</p>
<pre><code><span class="title">sudo</span> raspi-config
</code></pre><p>这里面可以进行一些系统相关设置，如图Figure 7所示，我们主要设置以下方面：</p>
<ul>
<li>选择Expand Filesystem，然后把整个系统的可用空间扩展到储存卡的大小。</li>
<li>选择Change User Password设置新密码，按提示步骤完成</li>
<li>选择Internationalisation Options—&gt;Change Timezone设置时区，在中国大陆，选择Asia—&gt;Chongqing(或者Hong_Kong)都可以</li>
<li>按’Tab键，选中&lt;Finish&gt;，回车，提示Reboot(重启)，选&lt;Yes&gt;，回车，RPi就会重启，SSH会自动断开连接，然后重新连接SSH，记得输入你设置的新密码。</li>
</ul>
<div align="center"><br><img src="http://7xnzab.com1.z0.glb.clouddn.com/uploads/raspberry-pi/raspberry-pi-nas-os-install/figure7.jpg_mkitby" alt=""><br>Figure 7. raspi-config命令配置界面<br></div>

<p>其他一些选项，我反正是没设置，保持默认，想折腾的可以试试，比如Overclock(超频)。</p>
<p>Tips :</p>
<ul>
<li>输入命令时，按<code>TAB</code>键可以自动完成</li>
<li><code>sudo</code> 临时用root权限运行命令</li>
<li>用命令设置用户密码：<code>passwd</code> 用户名，比如设置pi密码，<code>passwd pi</code></li>
<li>启用root账户，输入<code>sudo passwd root</code>,设置 root 账号的密码，会让你输入两次新密码。输入<code>sudo passwd --unlock root</code>,启用 root 账号登录。建议不要用root账户登录，而采用下面su命令</li>
<li><p>切换到某一用户，<code>su - 用户名</code>，注意-前后各有一个空格，切换到root输入<code>su – root</code></p>
</li>
<li><p>某个命令不会用，可以输入<code>命令 --help</code>或者<code>man</code>。例如 <code>passwd –help</code>, <code>man passwd</code></p>
</li>
<li>man命令快捷键，e—向下滚动，y—向上滚动，q—退出，h—查看帮助</li>
</ul>
<h2 id="网卡设置">网卡设置</h2><p>我们可以选择有线网卡或者购买无线网卡。如果树莓派主要用来做服务器，就像本文那样，建议使用有线网卡，原因有两点，第一信号稳定，网络质量有保证；第二点减小USB耗电，为后面挂载移动硬盘提供有利条件，具体后面会讲。</p>
<h3 id="有线网卡">有线网卡</h3><p>设置静态IP地址，如果前面绑定过IP地址和MAC地址，那么这一步可以选择跳过。<br>编辑网络接口文件：</p>
<pre><code>sudo nano <span class="regexp">/etc/</span>network<span class="regexp">/interfaces</span>
</code></pre><p>默认配置如下：</p>
<pre><code>auto lo
iface lo <span class="keyword">inet</span> loopback
iface eth0 <span class="keyword">inet</span> dhcp
allow-hotplug wlan0
iface wlan0 <span class="keyword">inet</span> manual
wpa-roam /etc/wpa_supplicant/wpa_supplicant.conf
iface <span class="keyword">default</span> <span class="keyword">inet</span> dhcp
</code></pre><p>如果你要设置的是有线网卡的 IP 地址，那么把 eth0 的 dhcp 改成 static 然后在下一行追加 IP 信息，内容如下：</p>
<pre><code>iface eth0 inet <span class="keyword">static</span>
address <span class="number">192.168</span><span class="number">.1</span><span class="number">.118</span>        <span class="preprocessor"># 静态IP地址</span>
netmask <span class="number">255.255</span><span class="number">.255</span><span class="number">.0</span>        <span class="preprocessor"># 子网掩码</span>
gateway <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span>          <span class="preprocessor"># 网关</span>
dns-nameservers <span class="number">192.168</span><span class="number">.1</span><span class="number">.1</span>  <span class="preprocessor">#  DNS服务器</span>
</code></pre><p>nano tips:</p>
<ul>
<li>方向键控制光标移动</li>
<li><code>Backspace</code>和<code>delete</code>键用来删除</li>
<li>修改好后, <code>Ctrl+O</code>提示保存文件名，直接回车</li>
<li><code>Ctrl+X</code>退出nano</li>
<li><code>Ctrl+Z</code>放弃修改并退出nano</li>
<li><code>Shift+Insert</code>粘贴</li>
</ul>
<h3 id="无线网卡">无线网卡</h3><p>等更新…</p>
<h2 id="软件更新源">软件更新源</h2><p>由于默认的镜像源网站在国外，导致下载速度非常慢，因此需要修改为国内镜像站点。先备份配置文件，做什么改动之前先备份是个好习惯。</p>
<pre><code>sudo cp /etc/apt/sources<span class="class">.list</span> /etc/apt/sources<span class="class">.list</span><span class="class">.orig</span>
</code></pre><p>然后编辑配置文件，输入</p>
<pre><code>sudo nano <span class="regexp">/etc/</span>apt<span class="regexp">/sources.list 或者sudo vi /</span>etc<span class="regexp">/apt/</span>sources.list
</code></pre><p>删除所有内容，从下面选一个速度最快的源(ping一下可知, ping mirrors.neusoft.edu.cn)，然后复制粘贴，保存。下面列出的是目前（2015/11/04）还有效的。</p>
<pre><code><span class="comment">#大连东软信息学院(北方用户)</span>
deb <span class="symbol">http:</span>/<span class="regexp">/mirrors.neusoft.edu.cn/raspbian</span><span class="regexp">/raspbian/</span> wheezy main contrib non-free rpi
deb-src <span class="symbol">http:</span>/<span class="regexp">/mirrors.neusoft.edu.cn/raspbian</span><span class="regexp">/raspbian/</span> wheezy main contrib non-free rpi

<span class="comment">#中国科学技术大学</span>
deb <span class="symbol">http:</span>/<span class="regexp">/mirrors.ustc.edu.cn/raspbian</span><span class="regexp">/raspbian/</span> wheezy main contrib non-free rpi
deb-src <span class="symbol">http:</span>/<span class="regexp">/mirrors.ustc.edu.cn/raspbian</span><span class="regexp">/raspbian/</span> wheezy main contrib non-free rpi

<span class="comment">#清华大学</span>
deb <span class="symbol">http:</span>/<span class="regexp">/mirrors.tuna.tsinghua.edu.cn/raspbian</span><span class="regexp">/raspbian/</span> wheezy main contrib non-free rpi
deb-src <span class="symbol">http:</span>/<span class="regexp">/mirrors.tuna.tsinghua.edu.cn/raspbian</span><span class="regexp">/raspbian/</span> wheezy main contrib non-free rpi

<span class="comment">#重庆大学(中西部用户)</span>
deb <span class="symbol">http:</span>/<span class="regexp">/mirrors.cqu.edu.cn/raspbian</span><span class="regexp">/raspbian/</span> wheezy main contrib non-free rpi
deb-src <span class="symbol">http:</span>/<span class="regexp">/mirrors.cqu.edu.cn/raspbian</span><span class="regexp">/raspbian/</span> wheezy main contrib non-free rpi

<span class="comment">#前面几个都是教育网的</span>

<span class="comment">#搜狐</span>
deb <span class="symbol">http:</span>/<span class="regexp">/mirrors.sohu.com/raspbian</span><span class="regexp">/raspbian/</span> wheezy main contrib non-free rpi
deb-src <span class="symbol">http:</span>/<span class="regexp">/mirrors.sohu.com/raspbian</span><span class="regexp">/raspbian/</span> wheezy main contrib non-free rpi

<span class="comment">#阿里云</span>
deb <span class="symbol">http:</span>/<span class="regexp">/mirrors.aliyun.com/raspbian</span><span class="regexp">/raspbian/</span> wheezy main contrib non-free rpi
deb-src <span class="symbol">http:</span>/<span class="regexp">/mirrors.aliyun.com/raspbian</span><span class="regexp">/raspbian/</span> wheezy main contrib non-free rpi
</code></pre><p>更多的镜像列表可以访问官方网站<a href="http://www.raspbian.org/RaspbianMirrors/" target="_blank" rel="external">http://www.raspbian.org/RaspbianMirrors/</a></p>
<p>到这里，大部分初学者就开始虚了，我擦，怎么删除啊？怎么输入？下面以vi为例，看清楚了。复制上面的软件源到剪切板，定位到vi，在键盘上依次输入<code>Esc</code>，<code>ggdG</code>， <code>i</code>，<code>Shift+Insert</code>(或者鼠标右键粘贴)，<code>Esc</code>，<code>ZZ</code>。每一步解释：</p>
<ul>
<li>按键盘<code>Esc</code>键，从其他可能的任何模式退出，回到命令模式，防止小白瞎按，进入其他模式</li>
<li><code>ggdG</code>, 在命令模式下输入，就可以删除所有内容。<code>gg</code>—光标跳至文件首行，<code>dG</code>—删除从当前光标处到文件末尾的内容</li>
<li><code>i</code>，从命令模式进入插入模式</li>
<li>按住键盘<code>Shift</code>，然后再按<code>Insert</code>，或者鼠标右键–&gt;粘贴。</li>
<li><code>Esc</code>同上，<code>ZZ</code>存盘并退出， 也就是在小写模式下按键盘<code>Shift+zz</code></li>
</ul>
<p>上面任何一步出错，请<code>Esc</code>，<code>ZQ</code>(或者<code>:q!</code>)，然后重新来。因为我假定你不会任何vim操作。同终端打交道，学点vim操作还是有必要的，编辑器之神，装逼蛮不错的，嘿嘿，其实vim也没有想象的那么难学，我们只需要会基本操作就行了，比如移动光标、删除、撤销、输入、查找替换、复制粘贴等，网上有很多教程可以参考。</p>
<h2 id="系统更新">系统更新</h2><p>更新升级Raspbian软件包，输入</p>
<pre><code>sudo apt-<span class="built_in">get</span> <span class="keyword">update</span> &amp;&amp; sudo apt-<span class="built_in">get</span> upgrade
</code></pre><p>根据你网速快慢，等待时间不等。</p>
<p>安装vim，输入<code>sudo apt-get install vim</code>,然后编辑 .vimrc，分别输入 <code>vim ~/.vimrc</code>, <code>sudo vim /root/.vimrc</code>, 加入如下内容，</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">nu</span></span><br><span class="line"><span class="keyword">syntax</span> <span class="keyword">on</span></span><br><span class="line"><span class="keyword">set</span> tabstop=<span class="number">4</span></span><br></pre></td></tr></table></figure>
<p>分别表示显示行号、语法高亮，Tab宽度4。</p>
<p>最后讲一下如何更新RPi 固件(这里固件指的是GPU firmware and kernel)，一般没事不用更新固件，有更新强迫症的没办法，输入</p>
<pre><code><span class="title">sudo</span> rpi-update
</code></pre><p>等待固件更新完成，然后重启。如果提示命令找不到，需要安装rpi-update</p>
<pre><code>sudo apt-<span class="built_in">get</span> install rpi-<span class="keyword">update</span>
</code></pre><p>来安装rpi-update。我这系统装好后，默认就有rpi-update。查看kernel 版本，输入<code>uname -a</code>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="安装操作系统">安装操作系统</h1><p>在<a href="https://www.raspberrypi.org/downloads/">https://www.raspberrypi.org/downloads/</a> 下载Raspbian操作系统，下载完成后解压缩得到镜像文件(.img)，然后我们需要一个工具把镜像文件烧录到SD卡上， 我知道有两款工具，Win32DiskImager，USB Image Tool，另外这两款工具还可以备份整个SD卡为一个镜像文件。下面以Win32DiskImager为例说明如何烧录，如图Figure 1所示。</p>
<ul>
<li>把micro SD card插入读卡器中，连接上电脑. 等电脑识别后会分配一个盘符(例如G:)</li>
<li>从<a href="http://sourceforge.net/projects/win32diskimager/">http://sourceforge.net/projects/win32diskimager/</a> 下载 Win32DiskImager， 然后安装</li>
<li>安装完成后以系统管理员权限运行</li>
<li>选择之前解压缩得到的镜像文件，选择SD卡所在盘符</li>
<li>点击Write按钮开始写入镜像文件，然后就是等待，完成后会弹出提示框</li>
</ul>]]>
    
    </summary>
    
      <category term="DIY" scheme="http://mkitby.com/tags/DIY/"/>
    
      <category term="NAS" scheme="http://mkitby.com/tags/NAS/"/>
    
      <category term="Raspberry Pi" scheme="http://mkitby.com/tags/Raspberry-Pi/"/>
    
      <category term="树莓派" scheme="http://mkitby.com/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="Raspberry Pi" scheme="http://mkitby.com/categories/Raspberry-Pi/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Raspberry Pi从零开始搭建低成本NAS(2)-硬件组装]]></title>
    <link href="http://mkitby.com/2015/11/05/raspberry-pi-nas-hw-assembly/"/>
    <id>http://mkitby.com/2015/11/05/raspberry-pi-nas-hw-assembly/</id>
    <published>2015-11-05T14:04:14.000Z</published>
    <updated>2015-12-09T12:56:54.542Z</updated>
    <content type="html"><![CDATA[<h1 id="所需硬件">所需硬件</h1><p>下面列出所需硬件，注意有的是可选</p>
<ul>
<li>Raspberry Pi， 自己的是Raspberry Pi 2 Model B (900MHz, 1G RAM)</li>
<li>散热片（两片）+外壳(带风扇)，一天24小时开机，这个还是有必要。也不贵，二三十块钱，某宝就有</li>
<li>5V 2A电源， Micro USB线用来供电</li>
<li>16 G micro SD card(class 10+)， 至少16 G, 不然后面没得玩</li>
<li>移动硬盘或者U盘</li>
<li>USB集线器带外接电源(可选， 最好配一个)</li>
<li>USB wifi dongle(可选)：</li>
</ul>
<a id="more"></a>
<div align="center"><br><img src="http://7xnzab.com1.z0.glb.clouddn.com/uploads/raspberry-pi/raspberry-pi-nas-hw-assembly/figure1.jpg_mkitby" alt=""><br>&gt;Figure 1. 所需硬件<br></div>

<h1 id="硬件安装">硬件安装</h1><p>整个板子详细介绍，参考<a href="http://www.raspberrypi-spy.co.uk/2015/02/introducing-the-raspberry-pi-2-model-b/" target="_blank" rel="external">http://www.raspberrypi-spy.co.uk/2015/02/introducing-the-raspberry-pi-2-model-b/</a>，输出接口定义可以如图Figure 2所示。</p>
<div align="center"><br><img src="http://7xnzab.com1.z0.glb.clouddn.com/uploads/raspberry-pi/raspberry-pi-nas-hw-assembly/figure2.jpg_mkitby" alt=""><br>Figure 2. Raspberry Pi 2B输出接口定义<br></div>

<p>查看每个pin的详细信息，参考<a href="http://pi.gadgetoid.com/pinout/" target="_blank" rel="external">http://pi.gadgetoid.com/pinout/</a>，Raspberry Pi 2 Model B的GPIO引脚信息如图Figure 3所示。插头的4（+5V电源），6(地)引脚接风扇电源线，注意正负极别接反了。</p>
<div align="center"><br><img src="http://7xnzab.com1.z0.glb.clouddn.com/uploads/raspberry-pi/raspberry-pi-nas-hw-assembly/figure3.jpg_mkitby" alt=""><br>Figure 3. Raspberry Pi 2 Model B GPIO Header<br></div>

<p>以上是进行硬件组装及DIY需要的一些基本信息, 贴在这方便以后查找需要。安装步骤很简单,</p>
<ol>
<li>拿起树莓派板子，看清楚各种插槽接口，搞清楚是干嘛的，小心插坏了~</li>
<li>按照Figure 1所示，给两片芯片贴上散热片，要买那种自带粘胶的，手不要抖哦，小心贴歪了。</li>
<li>按照Figure 1所示，把风扇的电源插头接到电源引脚上，然后接上电源看风扇转不。</li>
<li>没什么问题就装上外壳。</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="所需硬件">所需硬件</h1><p>下面列出所需硬件，注意有的是可选</p>
<ul>
<li>Raspberry Pi， 自己的是Raspberry Pi 2 Model B (900MHz, 1G RAM)</li>
<li>散热片（两片）+外壳(带风扇)，一天24小时开机，这个还是有必要。也不贵，二三十块钱，某宝就有</li>
<li>5V 2A电源， Micro USB线用来供电</li>
<li>16 G micro SD card(class 10+)， 至少16 G, 不然后面没得玩</li>
<li>移动硬盘或者U盘</li>
<li>USB集线器带外接电源(可选， 最好配一个)</li>
<li>USB wifi dongle(可选)：</li>
</ul>]]>
    
    </summary>
    
      <category term="DIY" scheme="http://mkitby.com/tags/DIY/"/>
    
      <category term="NAS" scheme="http://mkitby.com/tags/NAS/"/>
    
      <category term="Raspberry Pi" scheme="http://mkitby.com/tags/Raspberry-Pi/"/>
    
      <category term="树莓派" scheme="http://mkitby.com/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="Raspberry Pi" scheme="http://mkitby.com/categories/Raspberry-Pi/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Raspberry Pi从零开始搭建低成本NAS(1)-开篇]]></title>
    <link href="http://mkitby.com/2015/11/05/raspberry-pi-nas-starting/"/>
    <id>http://mkitby.com/2015/11/05/raspberry-pi-nas-starting/</id>
    <published>2015-11-05T11:38:37.000Z</published>
    <updated>2016-04-08T13:40:50.145Z</updated>
    <content type="html"><![CDATA[<p>入手树莓派也差不多四五个月了，其实最初就是想弄一台离线下载机，最开始是在网上买了一台HG255D路由器来实现离线下载，最后发现配置太差，根本满足不了需求，直接扔一边了。后面树莓派进入我的视线，配置也还行，可玩性比较高，随后入手。目前这台迷你型服务器已经稳定运行三个多月了，总是听说linux稳定，现在自己是体会到了。</p>
<a id="more"></a>
<div align="center"><br><img src="http://7xnzab.com1.z0.glb.clouddn.com/uploads/raspberry-pi/raspberry-pi-nas-starting/figure1.jpg_mkitby" alt=""><br></div>

<p>这个系列教程是由我平时的一些纪录文档整理而来。主要面向跟我一样没有什么Linux基础的初级入门用户，让大家少走弯路，来自己搭建一个低成本家庭NAS多媒体服务中心，它主要包含samba(文件共享), ftp, upnp/dlna, 远程下载等功能。<br>本系列主要分为以下几部分：</p>
<ol>
<li><a href="/2015/11/05/raspberry-pi-nas-starting/">Raspberry Pi从零开始搭建低成本NAS(1)-开篇</a></li>
<li><a href="/2015/11/05/raspberry-pi-nas-hw-assembly/">Raspberry Pi从零开始搭建低成本NAS(2)-硬件组装</a></li>
<li><a href="/2015/11/05/raspberry-pi-nas-os-install/">Raspberry Pi从零开始搭建低成本NAS(3)-系统安装</a></li>
<li><a href="/2015/11/05/raspberry-pi-nas-storage-device/">Raspberry Pi从零开始搭建低成本NAS(4)-存储设备</a></li>
<li><a href="/2015/11/09/raspberry-pi-nas-upnp-dlna/">Raspberry Pi从零开始搭建低成本NAS(5)-UPNP/DLNA多媒体</a></li>
<li><a href="/2015/12/08/raspberry-pi-nas-file-sharing/">Raspberry Pi从零开始搭建低成本NAS(6)-文件共享</a></li>
<li><a href="/2016/01/15/raspberry-pi-nas-remote-download-aria2/">Raspberry Pi从零开始搭建低成本NAS(7)-Aria2远程下载</a></li>
<li><a href="/2016/04/06/raspberry-pi-nas-remote-download-xunlei/">Raspberry Pi从零开始搭建低成本NAS(8)-迅雷远程下载</a></li>
<li><a href="/2016/04/07/raspberry-pi-nas-remote-management/">Raspberry Pi从零开始搭建低成本NAS(9)-外网登录树莓派</a></li>
<li><a href="/2016/04/08/raspberry-pi-nas-monitor/">Raspberry Pi从零开始搭建低成本NAS(10)-监控关键服务</a></li>
<li>Raspberry Pi从零开始搭建低成本NAS(11)-硬盘功耗管理</li>
<li>Raspberry Pi从零开始搭建低成本NAS(12)-操作系统备份</li>
</ol>
<embed height="452" width="544" quality="high" allowfullscreen="true" type="application/x-shockwave-flash" src="http://share.acg.tv/flash.swf" flashvars="aid=3186450&page=1" pluginspage="http://www.adobe.com/shockwave/download/download.cgi?P1_Prod_Version=ShockwaveFlash">
]]></content>
    <summary type="html">
    <![CDATA[<p>入手树莓派也差不多四五个月了，其实最初就是想弄一台离线下载机，最开始是在网上买了一台HG255D路由器来实现离线下载，最后发现配置太差，根本满足不了需求，直接扔一边了。后面树莓派进入我的视线，配置也还行，可玩性比较高，随后入手。目前这台迷你型服务器已经稳定运行三个多月了，总是听说linux稳定，现在自己是体会到了。</p>]]>
    
    </summary>
    
      <category term="DIY" scheme="http://mkitby.com/tags/DIY/"/>
    
      <category term="NAS" scheme="http://mkitby.com/tags/NAS/"/>
    
      <category term="Raspberry Pi" scheme="http://mkitby.com/tags/Raspberry-Pi/"/>
    
      <category term="树莓派" scheme="http://mkitby.com/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="Raspberry Pi" scheme="http://mkitby.com/categories/Raspberry-Pi/"/>
    
  </entry>
  
</feed>
